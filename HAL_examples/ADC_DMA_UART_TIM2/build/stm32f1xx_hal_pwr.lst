ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_hal_pwr.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWR_OverloadWfe,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	PWR_OverloadWfe:
  25              	.LFB64:
  26              		.file 1 "./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c"
   1:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
   2:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   ******************************************************************************
   3:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @file    stm32f1xx_hal_pwr.c
   4:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @author  MCD Application Team
   5:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @version V1.0.4
   6:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @date    29-April-2016
   7:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   8:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
   9:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following
  10:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
  11:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           + Initialization/de-initialization functions
  12:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           + Peripheral Control functions 
  13:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
  14:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   ******************************************************************************
  15:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @attention
  16:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
  17:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  18:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
  19:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * Redistribution and use in source and binary forms, with or without modification,
  20:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * are permitted provided that the following conditions are met:
  21:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  22:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer.
  23:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  24:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer in the documentation
  25:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *      and/or other materials provided with the distribution.
  26:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  27:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *      may be used to endorse or promote products derived from this software
  28:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *      without specific prior written permission.
  29:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
  30:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  31:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  32:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 2


  33:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  34:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  35:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  36:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  37:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  38:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  39:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  40:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
  41:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   ******************************************************************************
  42:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  43:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  44:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  45:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #include "stm32f1xx_hal.h"
  46:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  47:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @addtogroup STM32F1xx_HAL_Driver
  48:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  49:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  50:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  51:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR PWR
  52:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief    PWR HAL module driver
  53:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  54:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  55:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  56:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  57:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  58:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  59:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  60:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  61:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_Private_Constants PWR Private Constants
  62:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  63:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  64:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
  65:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_PVD_Mode_Mask PWR PVD Mode Mask
  66:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  67:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */ 
  68:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PVD_MODE_IT               ((uint32_t)0x00010000)
  69:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PVD_MODE_EVT              ((uint32_t)0x00020000)
  70:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PVD_RISING_EDGE           ((uint32_t)0x00000001)
  71:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PVD_FALLING_EDGE          ((uint32_t)0x00000002)
  72:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
  73:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
  74:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  75:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  76:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  77:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_register_alias_address PWR Register alias address
  78:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  79:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */ 
  80:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* ------------- PWR registers bit address in the alias region ---------------*/
  81:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  82:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PWR_CR_OFFSET            0x00
  83:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PWR_CSR_OFFSET           0x04
  84:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PWR_CR_OFFSET_BB         (PWR_OFFSET + PWR_CR_OFFSET)
  85:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PWR_CSR_OFFSET_BB        (PWR_OFFSET + PWR_CSR_OFFSET)
  86:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
  87:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
  88:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  89:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 3


  90:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_CR_register_alias PWR CR Register alias address
  91:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  92:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */  
  93:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* --- CR Register ---*/
  94:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Alias word address of LPSDSR bit */
  95:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define LPSDSR_BIT_NUMBER        POSITION_VAL(PWR_CR_LPDS)
  96:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define CR_LPSDSR_BB             ((uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32) + (LPSDSR_BIT
  97:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  98:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Alias word address of DBP bit */
  99:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define DBP_BIT_NUMBER            POSITION_VAL(PWR_CR_DBP)
 100:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define CR_DBP_BB                ((uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32) + (DBP_BIT_NU
 101:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 102:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Alias word address of PVDE bit */
 103:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PVDE_BIT_NUMBER           POSITION_VAL(PWR_CR_PVDE)
 104:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define CR_PVDE_BB               ((uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32) + (PVDE_BIT_N
 105:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 106:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 107:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
 108:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 109:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 110:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_CSR_register_alias PWR CSR Register alias address
 111:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
 112:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 113:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 114:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* --- CSR Register ---*/
 115:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Alias word address of EWUP1 bit */
 116:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define CSR_EWUP_BB(VAL)         ((uint32_t)(PERIPH_BB_BASE + (PWR_CSR_OFFSET_BB * 32) + (POSITION_
 117:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 118:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
 119:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 120:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 121:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 122:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
 123:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 124:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 125:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
 126:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
 127:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_Private_Functions PWR Private Functions
 128:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  * brief   WFE cortex command overloaded for HAL_PWR_EnterSTOPMode usage only (see Workaround secti
 129:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  * @{
 130:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  */
 131:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** static void PWR_OverloadWfe(void);
 132:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 133:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Private functions ---------------------------------------------------------*/
 134:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** __NOINLINE
 135:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** static void PWR_OverloadWfe(void)
 136:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
  27              		.loc 1 136 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 137:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __asm volatile( "wfe" );
  32              		.loc 1 137 0
  33              		.syntax unified
  34              	@ 137 "./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c" 1
  35 0000 20BF     		wfe
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 4


  36              	@ 0 "" 2
 138:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __asm volatile( "nop" );
  37              		.loc 1 138 0
  38              	@ 138 "./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c" 1
  39 0002 00BF     		nop
  40              	@ 0 "" 2
  41              		.thumb
  42              		.syntax unified
  43 0004 7047     		bx	lr
  44              		.cfi_endproc
  45              	.LFE64:
  47 0006 00BF     		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  48              		.align	2
  49              		.global	HAL_PWR_DeInit
  50              		.thumb
  51              		.thumb_func
  53              	HAL_PWR_DeInit:
  54              	.LFB65:
 139:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 140:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 141:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 142:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
 143:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 144:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 145:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 146:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
 147:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
 148:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 149:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 150:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions 
 151:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *  @brief   Initialization and de-initialization functions
 152:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
 153:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** @verbatim
 154:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  ===============================================================================
 155:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
 156:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  ===============================================================================
 157:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     [..]
 158:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data
 159:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       registers) is protected against possible unwanted
 160:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       write accesses.
 161:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
 162:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
 163:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****             __HAL_RCC_PWR_CLK_ENABLE() macro.
 164:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
 165:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 166:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** @endverbatim
 167:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
 168:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 169:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 170:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 171:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.  
 172:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 173:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 174:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
 175:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
  55              		.loc 1 175 0
  56              		.cfi_startproc
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 5


  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
 176:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  60              		.loc 1 176 0
  61 0000 044B     		ldr	r3, .L3
  62 0002 1A69     		ldr	r2, [r3, #16]
  63 0004 42F08052 		orr	r2, r2, #268435456
  64 0008 1A61     		str	r2, [r3, #16]
 177:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  65              		.loc 1 177 0
  66 000a 1A69     		ldr	r2, [r3, #16]
  67 000c 22F08052 		bic	r2, r2, #268435456
  68 0010 1A61     		str	r2, [r3, #16]
  69 0012 7047     		bx	lr
  70              	.L4:
  71              		.align	2
  72              	.L3:
  73 0014 00100240 		.word	1073876992
  74              		.cfi_endproc
  75              	.LFE65:
  77              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  78              		.align	2
  79              		.global	HAL_PWR_EnableBkUpAccess
  80              		.thumb
  81              		.thumb_func
  83              	HAL_PWR_EnableBkUpAccess:
  84              	.LFB66:
 178:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 179:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 180:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 181:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  Enables access to the backup domain (RTC registers, RTC
 182:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         backup data registers ).
 183:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note   If the HSE divided by 128 is used as the RTC clock, the
 184:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 185:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 186:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 187:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 188:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
  85              		.loc 1 188 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.LVL0:
  91              	.LBB28:
  92              	.LBB29:
  93              		.file 2 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
   9:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 6


  10:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    *
  21:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  35:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  38:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif
  45:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  46:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  47:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   @{
  51:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
  52:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  53:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
  54:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
  58:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
  60:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
  62:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  63:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  64:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
  65:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 7


  67:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
  69:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
  71:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
  73:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  74:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  75:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
  76:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
  80:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
  82:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  84:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
  87:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  88:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  89:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
  96:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
  98:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  99:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 100:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 105:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 107:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 109:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 112:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 113:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 114:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 115:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 119:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 121:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 123:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 8


 124:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 126:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 127:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 128:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 129:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 132:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 134:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 136:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 138:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 141:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 142:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 143:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 144:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 148:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 150:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 152:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 155:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 156:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 157:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 158:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 162:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 164:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 166:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 167:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 168:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 173:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 175:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 180:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 9


 181:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 182:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 186:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 188:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 190:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 192:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 193:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 194:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 195:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 199:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 201:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 203:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 206:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 207:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 208:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 209:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 213:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 215:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 217:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 218:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 219:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 221:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 222:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 226:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 228:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 230:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 231:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 232:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 233:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 237:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 10


 238:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 239:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 241:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 242:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 243:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 244:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 248:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 250:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 252:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 255:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 256:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 257:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 258:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 262:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 264:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 266:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 267:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 268:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 269:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 274:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 276:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 278:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 279:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 280:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 285:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 287:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 289:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 292:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 293:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 294:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 11


 295:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 299:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 301:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 303:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 306:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 307:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 309:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 310:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 314:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 316:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 319:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #else
 325:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif
 327:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 328:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 329:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 330:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 331:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 335:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 337:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif
 343:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 344:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 345:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 347:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 348:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 349:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 351:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 12


 352:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   @{
 356:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** */
 357:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 358:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #else
 365:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif
 368:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 369:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 370:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 375:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 377:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 378:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 379:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 380:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 383:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 385:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 387:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 388:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 389:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 390:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 394:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 396:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 398:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 399:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 400:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 401:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 404:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 406:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 408:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 13


 409:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 410:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 411:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 416:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 418:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 420:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 421:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 422:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 423:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 427:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 429:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 431:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 432:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 433:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 434:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 438:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 440:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 442:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 443:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 444:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 445:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 450:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 452:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #else
 455:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 457:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif
 460:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 461:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 462:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 463:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 464:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 14


 466:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 469:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 471:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 473:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 476:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 477:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 478:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 479:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 484:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 486:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #else
 489:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 491:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif
 494:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 495:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 496:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 497:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 498:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 504:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 506:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 508:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 509:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 510:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 511:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 517:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 519:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 520:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 521:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 15


 523:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 526:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 528:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 530:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  94              		.loc 2 531 0
  95 0000 4FF48073 		mov	r3, #256
  96              		.syntax unified
  97              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
  98 0004 93FAA3F3 		rbit r3, r3
  99              	@ 0 "" 2
 100              	.LVL1:
 101              		.thumb
 102              		.syntax unified
 103              	.LBE29:
 104              	.LBE28:
 189:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Enable access to RTC and backup registers */
 190:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 105              		.loc 1 190 0
 106 0008 B3FA83F3 		clz	r3, r3
 107 000c 9B00     		lsls	r3, r3, #2
 108 000e 03F18443 		add	r3, r3, #1107296256
 109 0012 03F56023 		add	r3, r3, #917504
 110 0016 0122     		movs	r2, #1
 111 0018 1A60     		str	r2, [r3]
 112 001a 7047     		bx	lr
 113              		.cfi_endproc
 114              	.LFE66:
 116              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
 117              		.align	2
 118              		.global	HAL_PWR_DisableBkUpAccess
 119              		.thumb
 120              		.thumb_func
 122              	HAL_PWR_DisableBkUpAccess:
 123              	.LFB67:
 191:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 192:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 193:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 194:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  Disables access to the backup domain (RTC registers, RTC
 195:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         backup data registers).
 196:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note   If the HSE divided by 128 is used as the RTC clock, the
 197:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 198:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 199:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 200:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 201:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 124              		.loc 1 201 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129              	.LVL2:
 130              	.LBB30:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 16


 131              	.LBB31:
 132              		.loc 2 531 0
 133 0000 4FF48073 		mov	r3, #256
 134              		.syntax unified
 135              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 136 0004 93FAA3F3 		rbit r3, r3
 137              	@ 0 "" 2
 138              	.LVL3:
 139              		.thumb
 140              		.syntax unified
 141              	.LBE31:
 142              	.LBE30:
 202:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Disable access to RTC and backup registers */
 203:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 143              		.loc 1 203 0
 144 0008 B3FA83F3 		clz	r3, r3
 145 000c 9B00     		lsls	r3, r3, #2
 146 000e 03F18443 		add	r3, r3, #1107296256
 147 0012 03F56023 		add	r3, r3, #917504
 148 0016 0022     		movs	r2, #0
 149 0018 1A60     		str	r2, [r3]
 150 001a 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE67:
 154              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
 155              		.align	2
 156              		.global	HAL_PWR_ConfigPVD
 157              		.thumb
 158              		.thumb_func
 160              	HAL_PWR_ConfigPVD:
 161              	.LFB68:
 204:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 205:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 206:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 207:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
 208:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 209:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 210:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions 
 211:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief    Low Power modes configuration functions
 212:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
 213:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** @verbatim
 214:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  ===============================================================================
 215:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 216:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  ===============================================================================
 217:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****      
 218:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     *** PVD configuration ***
 219:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     =========================
 220:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     [..]
 221:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a
 222:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 223:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 224:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower
 225:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI
 226:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           line16 and can generate an interrupt if enabled. This is done through
 227:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           __HAL_PVD_EXTI_ENABLE_IT() macro.
 228:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) The PVD is stopped in Standby mode.
 229:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 17


 230:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     *** WakeUp pin configuration ***
 231:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     ================================
 232:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     [..]
 233:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) WakeUp pin is used to wake up the system from Standby mode. This pin is
 234:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           forced in input pull-down configuration and is active on rising edges.
 235:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) There is one WakeUp pin:
 236:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           WakeUp Pin 1 on PA.00.
 237:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 238:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     [..]
 239:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 240:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     *** Low Power modes configuration ***
 241:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     =====================================
 242:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****      [..]
 243:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       The device features 3 low-power modes:
 244:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Sleep mode: CPU clock off, all peripherals including Cortex-M3 core peripherals like 
 245:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****                       NVIC, SysTick, etc. are kept running
 246:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Stop mode: All clocks are stopped
 247:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Standby mode: 1.8V domain powered off
 248:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 249:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 250:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    *** Sleep mode ***
 251:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    ==================
 252:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     [..]
 253:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Entry:
 254:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           The Sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_S
 255:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****               functions with
 256:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 257:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 258:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****      
 259:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Exit:
 260:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         (++) WFI entry mode, Any peripheral interrupt acknowledged by the nested vectored interrupt
 261:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****              controller (NVIC) can wake up the device from Sleep mode.
 262:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         (++) WFE entry mode, Any wakeup event can wake up the device from Sleep mode.
 263:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****            (+++) Any peripheral interrupt w/o NVIC configuration & SEVONPEND bit set in the Cortex 
 264:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****            (+++) Any EXTI Line (Internal or External) configured in Event mode
 265:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 266:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    *** Stop mode ***
 267:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    =================
 268:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     [..]
 269:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       The Stop mode is based on the Cortex-M3 deepsleep mode combined with peripheral
 270:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       clock gating. The voltage regulator can be configured either in normal or low-power mode.
 271:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       In Stop mode, all clocks in the 1.8 V domain are stopped, the PLL, the HSI and the HSE RC 
 272:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       oscillators are disabled. SRAM and register contents are preserved.
 273:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       In Stop mode, all I/O pins keep the same state as in Run mode.
 274:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 275:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Entry:
 276:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****            The Stop mode is entered using the HAL_PWR_EnterSTOPMode(PWR_REGULATOR_VALUE, PWR_SLEEPE
 277:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****              function with:
 278:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) PWR_REGULATOR_VALUE= PWR_MAINREGULATOR_ON: Main regulator ON.
 279:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) PWR_REGULATOR_VALUE= PWR_LOWPOWERREGULATOR_ON: Low Power regulator ON.
 280:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFx= PWR_SLEEPENTRY_WFI: enter STOP mode with WFI instruction
 281:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFx= PWR_SLEEPENTRY_WFE: enter STOP mode with WFE instruction
 282:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Exit:
 283:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) WFI entry mode, Any EXTI Line (Internal or External) configured in Interrupt mode wi
 284:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) WFE entry mode, Any EXTI Line (Internal or External) configured in Event mode.
 285:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 286:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    *** Standby mode ***
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 18


 287:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    ====================
 288:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****      [..]
 289:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based on the
 290:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       Cortex-M3 deepsleep mode, with the voltage regulator disabled. The 1.8 V domain is 
 291:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       consequently powered off. The PLL, the HSI oscillator and the HSE oscillator are also 
 292:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       switched off. SRAM and register contents are lost except for registers in the Backup domain 
 293:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       and Standby circuitry
 294:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       
 295:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Entry:
 296:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         (++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.
 297:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Exit:
 298:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         (++) WKUP pin rising edge, RTC alarm event rising edge, external Reset in 
 299:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****              NRSTpin, IWDG Reset
 300:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 301:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 302:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        =============================================
 303:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        [..]
 304:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         
 305:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        (+) The MCU can be woken up from low-power mode by an RTC Alarm event, 
 306:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****            without depending on an external interrupt (Auto-wakeup mode).
 307:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    
 308:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        (+) RTC auto-wakeup (AWU) from the Stop and Standby modes
 309:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 310:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****            (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to 
 311:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****                 configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() functio
 312:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 313:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    *** PWR Workarounds linked to Silicon Limitation ***
 314:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        ====================================================
 315:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        [..]
 316:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        Below the list of all silicon limitations known on STM32F1xx prouct.
 317:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 318:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        (#)Workarounds Implemented inside PWR HAL Driver
 319:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (##)Debugging Stop mode with WFE entry - overloaded the WFE by an internal function    
 320:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         
 321:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** @endverbatim
 322:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
 323:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 324:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 325:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 326:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 327:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param  sConfigPVD: pointer to an PWR_PVDTypeDef structure that contains the configuration
 328:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         information for the PVD.
 329:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
 330:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         more details about the voltage threshold corresponding to each
 331:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         detection level.
 332:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 333:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 334:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
 335:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 162              		.loc 1 335 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 167              	.LVL4:
 336:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check the parameters */
 337:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 19


 338:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 339:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 340:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Set PLS[7:5] bits according to PVDLevel value */
 341:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 168              		.loc 1 341 0
 169 0000 1E49     		ldr	r1, .L12
 170 0002 0B68     		ldr	r3, [r1]
 171 0004 23F0E002 		bic	r2, r3, #224
 172 0008 0368     		ldr	r3, [r0]
 173 000a 1343     		orrs	r3, r3, r2
 174 000c 0B60     		str	r3, [r1]
 342:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 343:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Clear any previous config. Keep it clear if no event or IT mode is selected */
 344:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 175              		.loc 1 344 0
 176 000e 1C4B     		ldr	r3, .L12+4
 177 0010 5A68     		ldr	r2, [r3, #4]
 178 0012 22F48032 		bic	r2, r2, #65536
 179 0016 5A60     		str	r2, [r3, #4]
 345:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 180              		.loc 1 345 0
 181 0018 1A68     		ldr	r2, [r3]
 182 001a 22F48032 		bic	r2, r2, #65536
 183 001e 1A60     		str	r2, [r3]
 346:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 184              		.loc 1 346 0
 185 0020 DA68     		ldr	r2, [r3, #12]
 186 0022 22F48032 		bic	r2, r2, #65536
 187 0026 DA60     		str	r2, [r3, #12]
 347:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 188              		.loc 1 347 0
 189 0028 9A68     		ldr	r2, [r3, #8]
 190 002a 22F48032 		bic	r2, r2, #65536
 191 002e 9A60     		str	r2, [r3, #8]
 348:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 349:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Configure interrupt mode */
 350:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 192              		.loc 1 350 0
 193 0030 4368     		ldr	r3, [r0, #4]
 194 0032 13F4803F 		tst	r3, #65536
 195 0036 04D0     		beq	.L8
 351:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 352:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 196              		.loc 1 352 0
 197 0038 114A     		ldr	r2, .L12+4
 198 003a 1368     		ldr	r3, [r2]
 199 003c 43F48033 		orr	r3, r3, #65536
 200 0040 1360     		str	r3, [r2]
 201              	.L8:
 353:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 354:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 355:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Configure event mode */
 356:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 202              		.loc 1 356 0
 203 0042 4368     		ldr	r3, [r0, #4]
 204 0044 13F4003F 		tst	r3, #131072
 205 0048 04D0     		beq	.L9
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 20


 357:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 358:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 206              		.loc 1 358 0
 207 004a 0D4A     		ldr	r2, .L12+4
 208 004c 5368     		ldr	r3, [r2, #4]
 209 004e 43F48033 		orr	r3, r3, #65536
 210 0052 5360     		str	r3, [r2, #4]
 211              	.L9:
 359:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 360:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 361:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Configure the edge */
 362:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 212              		.loc 1 362 0
 213 0054 4368     		ldr	r3, [r0, #4]
 214 0056 13F0010F 		tst	r3, #1
 215 005a 04D0     		beq	.L10
 363:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 364:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 216              		.loc 1 364 0
 217 005c 084A     		ldr	r2, .L12+4
 218 005e 9368     		ldr	r3, [r2, #8]
 219 0060 43F48033 		orr	r3, r3, #65536
 220 0064 9360     		str	r3, [r2, #8]
 221              	.L10:
 365:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 366:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 367:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 222              		.loc 1 367 0
 223 0066 4368     		ldr	r3, [r0, #4]
 224 0068 13F0020F 		tst	r3, #2
 225 006c 04D0     		beq	.L7
 368:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 369:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 226              		.loc 1 369 0
 227 006e 044A     		ldr	r2, .L12+4
 228 0070 D368     		ldr	r3, [r2, #12]
 229 0072 43F48033 		orr	r3, r3, #65536
 230 0076 D360     		str	r3, [r2, #12]
 231              	.L7:
 232 0078 7047     		bx	lr
 233              	.L13:
 234 007a 00BF     		.align	2
 235              	.L12:
 236 007c 00700040 		.word	1073770496
 237 0080 00040140 		.word	1073808384
 238              		.cfi_endproc
 239              	.LFE68:
 241              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 242              		.align	2
 243              		.global	HAL_PWR_EnablePVD
 244              		.thumb
 245              		.thumb_func
 247              	HAL_PWR_EnablePVD:
 248              	.LFB69:
 370:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 371:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 372:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 21


 373:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 374:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  Enables the Power Voltage Detector(PVD).
 375:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 376:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 377:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 378:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 249              		.loc 1 378 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 254              	.LVL5:
 255              	.LBB32:
 256              	.LBB33:
 257              		.loc 2 531 0
 258 0000 1023     		movs	r3, #16
 259              		.syntax unified
 260              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 261 0002 93FAA3F3 		rbit r3, r3
 262              	@ 0 "" 2
 263              	.LVL6:
 264              		.thumb
 265              		.syntax unified
 266              	.LBE33:
 267              	.LBE32:
 379:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Enable the power voltage detector */
 380:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 268              		.loc 1 380 0
 269 0006 B3FA83F3 		clz	r3, r3
 270 000a 9B00     		lsls	r3, r3, #2
 271 000c 03F18443 		add	r3, r3, #1107296256
 272 0010 03F56023 		add	r3, r3, #917504
 273 0014 0122     		movs	r2, #1
 274 0016 1A60     		str	r2, [r3]
 275 0018 7047     		bx	lr
 276              		.cfi_endproc
 277              	.LFE69:
 279 001a 00BF     		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 280              		.align	2
 281              		.global	HAL_PWR_DisablePVD
 282              		.thumb
 283              		.thumb_func
 285              	HAL_PWR_DisablePVD:
 286              	.LFB70:
 381:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 382:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 383:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 384:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  Disables the Power Voltage Detector(PVD).
 385:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 386:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 387:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 388:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 287              		.loc 1 388 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              		@ link register save eliminated.
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 22


 292              	.LVL7:
 293              	.LBB34:
 294              	.LBB35:
 295              		.loc 2 531 0
 296 0000 1023     		movs	r3, #16
 297              		.syntax unified
 298              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 299 0002 93FAA3F3 		rbit r3, r3
 300              	@ 0 "" 2
 301              	.LVL8:
 302              		.thumb
 303              		.syntax unified
 304              	.LBE35:
 305              	.LBE34:
 389:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Disable the power voltage detector */
 390:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 306              		.loc 1 390 0
 307 0006 B3FA83F3 		clz	r3, r3
 308 000a 9B00     		lsls	r3, r3, #2
 309 000c 03F18443 		add	r3, r3, #1107296256
 310 0010 03F56023 		add	r3, r3, #917504
 311 0014 0022     		movs	r2, #0
 312 0016 1A60     		str	r2, [r3]
 313 0018 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE70:
 317 001a 00BF     		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 318              		.align	2
 319              		.global	HAL_PWR_EnableWakeUpPin
 320              		.thumb
 321              		.thumb_func
 323              	HAL_PWR_EnableWakeUpPin:
 324              	.LFB71:
 391:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 392:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 393:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 394:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Enables the WakeUp PINx functionality.
 395:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param WakeUpPinx: Specifies the Power Wake-Up pin to enable.
 396:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *        This parameter can be one of the following values:
 397:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 398:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 399:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 400:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
 401:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 325              		.loc 1 401 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              		@ link register save eliminated.
 330              	.LVL9:
 331              	.LBB36:
 332              	.LBB37:
 333              		.loc 2 531 0
 334              		.syntax unified
 335              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 336 0000 90FAA0F0 		rbit r0, r0
 337              	@ 0 "" 2
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 23


 338              	.LVL10:
 339              		.thumb
 340              		.syntax unified
 341              	.LBE37:
 342              	.LBE36:
 402:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check the parameter */
 403:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 404:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Enable the EWUPx pin */
 405:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 343              		.loc 1 405 0
 344 0004 B0FA80F0 		clz	r0, r0
 345 0008 0122     		movs	r2, #1
 346 000a 024B     		ldr	r3, .L17
 347 000c 43F82020 		str	r2, [r3, r0, lsl #2]
 348 0010 7047     		bx	lr
 349              	.L18:
 350 0012 00BF     		.align	2
 351              	.L17:
 352 0014 80000E42 		.word	1108213888
 353              		.cfi_endproc
 354              	.LFE71:
 356              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 357              		.align	2
 358              		.global	HAL_PWR_DisableWakeUpPin
 359              		.thumb
 360              		.thumb_func
 362              	HAL_PWR_DisableWakeUpPin:
 363              	.LFB72:
 406:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 407:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 408:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 409:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Disables the WakeUp PINx functionality.
 410:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param WakeUpPinx: Specifies the Power Wake-Up pin to disable.
 411:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *        This parameter can be one of the following values:
 412:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 413:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 414:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 415:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 416:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 364              		.loc 1 416 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 368              		@ link register save eliminated.
 369              	.LVL11:
 370              	.LBB38:
 371              	.LBB39:
 372              		.loc 2 531 0
 373              		.syntax unified
 374              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 375 0000 90FAA0F0 		rbit r0, r0
 376              	@ 0 "" 2
 377              	.LVL12:
 378              		.thumb
 379              		.syntax unified
 380              	.LBE39:
 381              	.LBE38:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 24


 417:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check the parameter */
 418:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 419:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Disable the EWUPx pin */
 420:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 382              		.loc 1 420 0
 383 0004 B0FA80F0 		clz	r0, r0
 384 0008 0022     		movs	r2, #0
 385 000a 024B     		ldr	r3, .L20
 386 000c 43F82020 		str	r2, [r3, r0, lsl #2]
 387 0010 7047     		bx	lr
 388              	.L21:
 389 0012 00BF     		.align	2
 390              	.L20:
 391 0014 80000E42 		.word	1108213888
 392              		.cfi_endproc
 393              	.LFE72:
 395              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 396              		.align	2
 397              		.global	HAL_PWR_EnterSLEEPMode
 398              		.thumb
 399              		.thumb_func
 401              	HAL_PWR_EnterSLEEPMode:
 402              	.LFB73:
 421:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 422:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 423:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 424:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Enters Sleep mode.
 425:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note  In Sleep mode, all I/O pins keep the same state as in Run mode.
 426:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param Regulator: Regulator state as no effect in SLEEP mode -  allows to support portability f
 427:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param SLEEPEntry: Specifies if SLEEP mode is entered with WFI or WFE instruction.
 428:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           When WFI entry is used, tick interrupt have to be disabled if not desired as 
 429:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           the interrupt wake up source.
 430:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           This parameter can be one of the following values:
 431:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 432:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 433:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 434:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 435:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 436:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 403              		.loc 1 436 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408              	.LVL13:
 437:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check the parameters */
 438:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* No check on Regulator because parameter not used in SLEEP mode */
 439:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 440:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 441:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 442:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 409              		.loc 1 442 0
 410 0000 064A     		ldr	r2, .L25
 411 0002 1369     		ldr	r3, [r2, #16]
 412 0004 23F00403 		bic	r3, r3, #4
 413 0008 1361     		str	r3, [r2, #16]
 443:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 25


 444:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 445:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 414              		.loc 1 445 0
 415 000a 0129     		cmp	r1, #1
 416 000c 01D1     		bne	.L23
 417              	.LBB40:
 418              	.LBB41:
 385:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 419              		.loc 2 385 0
 420              		.syntax unified
 421              	@ 385 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 422 000e 30BF     		wfi
 423              	@ 0 "" 2
 424              		.thumb
 425              		.syntax unified
 426 0010 7047     		bx	lr
 427              	.L23:
 428              	.LBE41:
 429              	.LBE40:
 430              	.LBB42:
 431              	.LBB43:
 406:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 432              		.loc 2 406 0
 433              		.syntax unified
 434              	@ 406 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 435 0012 40BF     		sev
 436              	@ 0 "" 2
 437              		.thumb
 438              		.syntax unified
 439              	.LBE43:
 440              	.LBE42:
 441              	.LBB44:
 442              	.LBB45:
 396:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 443              		.loc 2 396 0
 444              		.syntax unified
 445              	@ 396 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 446 0014 20BF     		wfe
 447              	@ 0 "" 2
 448              		.thumb
 449              		.syntax unified
 450              	.LBE45:
 451              	.LBE44:
 452              	.LBB46:
 453              	.LBB47:
 454              		.syntax unified
 455              	@ 396 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 456 0016 20BF     		wfe
 457              	@ 0 "" 2
 458              		.thumb
 459              		.syntax unified
 460 0018 7047     		bx	lr
 461              	.L26:
 462 001a 00BF     		.align	2
 463              	.L25:
 464 001c 00ED00E0 		.word	-536810240
 465              	.LBE47:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 26


 466              	.LBE46:
 467              		.cfi_endproc
 468              	.LFE73:
 470              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 471              		.align	2
 472              		.global	HAL_PWR_EnterSTOPMode
 473              		.thumb
 474              		.thumb_func
 476              	HAL_PWR_EnterSTOPMode:
 477              	.LFB74:
 446:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 447:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 448:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __WFI();
 449:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 450:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   else
 451:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 452:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     /* Request Wait For Event */
 453:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __SEV();
 454:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __WFE();
 455:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __WFE();
 456:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 457:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 458:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 459:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 460:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Enters Stop mode. 
 461:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note  In Stop mode, all I/O pins keep the same state as in Run mode.
 462:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note  When exiting Stop mode by using an interrupt or a wakeup event,
 463:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *        HSI RC oscillator is selected as system clock.
 464:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note  When the voltage regulator operates in low power mode, an additional
 465:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 466:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption
 467:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         is higher although the startup time is reduced.    
 468:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in Stop mode.
 469:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 470:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: Stop mode with regulator ON
 471:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: Stop mode with low power regulator ON
 472:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param STOPEntry: Specifies if Stop mode in entered with WFI or WFE instruction.
 473:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 474:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
 475:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
 476:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 477:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 478:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 479:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 478              		.loc 1 479 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 0, uses_anonymous_args = 0
 482              	.LVL14:
 483 0000 08B5     		push	{r3, lr}
 484              	.LCFI0:
 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 3, -8
 487              		.cfi_offset 14, -4
 480:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check the parameters */
 481:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 482:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 27


 483:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 484:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */
 485:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 488              		.loc 1 485 0
 489 0002 0F4A     		ldr	r2, .L31
 490 0004 1368     		ldr	r3, [r2]
 491 0006 23F00203 		bic	r3, r3, #2
 492 000a 1360     		str	r3, [r2]
 486:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 487:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator p
 488:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 493              		.loc 1 488 0
 494 000c 1368     		ldr	r3, [r2]
 495 000e 23F00103 		bic	r3, r3, #1
 496 0012 1843     		orrs	r0, r0, r3
 497              	.LVL15:
 498 0014 1060     		str	r0, [r2]
 489:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 490:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 491:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 499              		.loc 1 491 0
 500 0016 0B4A     		ldr	r2, .L31+4
 501 0018 1369     		ldr	r3, [r2, #16]
 502 001a 43F00403 		orr	r3, r3, #4
 503 001e 1361     		str	r3, [r2, #16]
 492:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 493:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Select Stop mode entry --------------------------------------------------*/
 494:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 504              		.loc 1 494 0
 505 0020 0129     		cmp	r1, #1
 506 0022 01D1     		bne	.L28
 507              	.LBB48:
 508              	.LBB49:
 385:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 509              		.loc 2 385 0
 510              		.syntax unified
 511              	@ 385 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 512 0024 30BF     		wfi
 513              	@ 0 "" 2
 514              		.thumb
 515              		.syntax unified
 516 0026 04E0     		b	.L29
 517              	.L28:
 518              	.LBE49:
 519              	.LBE48:
 520              	.LBB50:
 521              	.LBB51:
 406:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 522              		.loc 2 406 0
 523              		.syntax unified
 524              	@ 406 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 525 0028 40BF     		sev
 526              	@ 0 "" 2
 527              		.thumb
 528              		.syntax unified
 529              	.LBE51:
 530              	.LBE50:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 28


 495:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 496:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 497:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __WFI();
 498:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 499:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   else
 500:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 501:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     /* Request Wait For Event */
 502:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __SEV();
 503:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     PWR_OverloadWfe(); /* WFE redefine locally */
 531              		.loc 1 503 0
 532 002a FFF7FEFF 		bl	PWR_OverloadWfe
 533              	.LVL16:
 504:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     PWR_OverloadWfe(); /* WFE redefine locally */
 534              		.loc 1 504 0
 535 002e FFF7FEFF 		bl	PWR_OverloadWfe
 536              	.LVL17:
 537              	.L29:
 505:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 506:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 507:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 538              		.loc 1 507 0
 539 0032 044A     		ldr	r2, .L31+4
 540 0034 1369     		ldr	r3, [r2, #16]
 541 0036 23F00403 		bic	r3, r3, #4
 542 003a 1361     		str	r3, [r2, #16]
 543 003c 08BD     		pop	{r3, pc}
 544              	.L32:
 545 003e 00BF     		.align	2
 546              	.L31:
 547 0040 00700040 		.word	1073770496
 548 0044 00ED00E0 		.word	-536810240
 549              		.cfi_endproc
 550              	.LFE74:
 552              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 553              		.align	2
 554              		.global	HAL_PWR_EnterSTANDBYMode
 555              		.thumb
 556              		.thumb_func
 558              	HAL_PWR_EnterSTANDBYMode:
 559              	.LFB75:
 508:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 509:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 510:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 511:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Enters Standby mode.
 512:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note  In Standby mode, all I/O pins are high impedance except for:
 513:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          - Reset pad (still available) 
 514:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          - TAMPER pin if configured for tamper or calibration out.
 515:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          - WKUP pin (PA0) if enabled.
 516:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 517:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 518:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 519:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 560              		.loc 1 519 0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564              		@ link register save eliminated.
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 29


 520:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Select Standby mode */
 521:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   SET_BIT(PWR->CR, PWR_CR_PDDS);
 565              		.loc 1 521 0
 566 0000 054A     		ldr	r2, .L34
 567 0002 1368     		ldr	r3, [r2]
 568 0004 43F00203 		orr	r3, r3, #2
 569 0008 1360     		str	r3, [r2]
 522:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 523:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 524:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 570              		.loc 1 524 0
 571 000a 044A     		ldr	r2, .L34+4
 572 000c 1369     		ldr	r3, [r2, #16]
 573 000e 43F00403 		orr	r3, r3, #4
 574 0012 1361     		str	r3, [r2, #16]
 575              	.LBB52:
 576              	.LBB53:
 385:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 577              		.loc 2 385 0
 578              		.syntax unified
 579              	@ 385 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 580 0014 30BF     		wfi
 581              	@ 0 "" 2
 582              		.thumb
 583              		.syntax unified
 584 0016 7047     		bx	lr
 585              	.L35:
 586              		.align	2
 587              	.L34:
 588 0018 00700040 		.word	1073770496
 589 001c 00ED00E0 		.word	-536810240
 590              	.LBE53:
 591              	.LBE52:
 592              		.cfi_endproc
 593              	.LFE75:
 595              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 596              		.align	2
 597              		.global	HAL_PWR_EnableSleepOnExit
 598              		.thumb
 599              		.thumb_func
 601              	HAL_PWR_EnableSleepOnExit:
 602              	.LFB76:
 525:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 526:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* This option is used to ensure that store operations are completed */
 527:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #if defined ( __CC_ARM)
 528:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __force_stores();
 529:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #endif
 530:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 531:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __WFI();
 532:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 533:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 534:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 535:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 536:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Indicates Sleep-On-Exit when returning from Handler mode to Thread mode. 
 537:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 538:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 539:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 30


 540:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *       interruptions handling.         
 541:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 542:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 543:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 544:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 603              		.loc 1 544 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              		@ link register save eliminated.
 545:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 546:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 608              		.loc 1 546 0
 609 0000 024A     		ldr	r2, .L37
 610 0002 1369     		ldr	r3, [r2, #16]
 611 0004 43F00203 		orr	r3, r3, #2
 612 0008 1361     		str	r3, [r2, #16]
 613 000a 7047     		bx	lr
 614              	.L38:
 615              		.align	2
 616              	.L37:
 617 000c 00ED00E0 		.word	-536810240
 618              		.cfi_endproc
 619              	.LFE76:
 621              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 622              		.align	2
 623              		.global	HAL_PWR_DisableSleepOnExit
 624              		.thumb
 625              		.thumb_func
 627              	HAL_PWR_DisableSleepOnExit:
 628              	.LFB77:
 547:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 548:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 549:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 550:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 551:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Disables Sleep-On-Exit feature when returning from Handler mode to Thread mode. 
 552:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 553:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.          
 554:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 555:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 556:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 557:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 629              		.loc 1 557 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              		@ link register save eliminated.
 558:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 559:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 634              		.loc 1 559 0
 635 0000 024A     		ldr	r2, .L40
 636 0002 1369     		ldr	r3, [r2, #16]
 637 0004 23F00203 		bic	r3, r3, #2
 638 0008 1361     		str	r3, [r2, #16]
 639 000a 7047     		bx	lr
 640              	.L41:
 641              		.align	2
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 31


 642              	.L40:
 643 000c 00ED00E0 		.word	-536810240
 644              		.cfi_endproc
 645              	.LFE77:
 647              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 648              		.align	2
 649              		.global	HAL_PWR_EnableSEVOnPend
 650              		.thumb
 651              		.thumb_func
 653              	HAL_PWR_EnableSEVOnPend:
 654              	.LFB78:
 560:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 561:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 562:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 563:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 564:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Enables CORTEX M3 SEVONPEND bit. 
 565:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
 566:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 567:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 568:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 569:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 570:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 655              		.loc 1 570 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              		@ link register save eliminated.
 571:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 572:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 660              		.loc 1 572 0
 661 0000 024A     		ldr	r2, .L43
 662 0002 1369     		ldr	r3, [r2, #16]
 663 0004 43F01003 		orr	r3, r3, #16
 664 0008 1361     		str	r3, [r2, #16]
 665 000a 7047     		bx	lr
 666              	.L44:
 667              		.align	2
 668              	.L43:
 669 000c 00ED00E0 		.word	-536810240
 670              		.cfi_endproc
 671              	.LFE78:
 673              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 674              		.align	2
 675              		.global	HAL_PWR_DisableSEVOnPend
 676              		.thumb
 677              		.thumb_func
 679              	HAL_PWR_DisableSEVOnPend:
 680              	.LFB79:
 573:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 574:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 575:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 576:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 577:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Disables CORTEX M3 SEVONPEND bit. 
 578:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
 579:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.         
 580:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 581:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 32


 582:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 583:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 681              		.loc 1 583 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              		@ link register save eliminated.
 584:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 585:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 686              		.loc 1 585 0
 687 0000 024A     		ldr	r2, .L46
 688 0002 1369     		ldr	r3, [r2, #16]
 689 0004 23F01003 		bic	r3, r3, #16
 690 0008 1361     		str	r3, [r2, #16]
 691 000a 7047     		bx	lr
 692              	.L47:
 693              		.align	2
 694              	.L46:
 695 000c 00ED00E0 		.word	-536810240
 696              		.cfi_endproc
 697              	.LFE79:
 699              		.section	.text.HAL_PWR_PVDCallback,"ax",%progbits
 700              		.align	2
 701              		.weak	HAL_PWR_PVDCallback
 702              		.thumb
 703              		.thumb_func
 705              	HAL_PWR_PVDCallback:
 706              	.LFB81:
 586:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 587:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 588:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 589:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 590:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 591:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  This function handles the PWR PVD interrupt request.
 592:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note   This API should be called under the PVD_IRQHandler().
 593:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 594:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 595:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_PVD_IRQHandler(void)
 596:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 597:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check PWR exti flag */
 598:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 599:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 600:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     /* PWR PVD interrupt user callback */
 601:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     HAL_PWR_PVDCallback();
 602:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 603:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     /* Clear PWR Exti pending bit */
 604:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 605:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 606:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 607:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 608:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 609:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  PWR PVD interrupt callback
 610:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 611:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 612:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** __weak void HAL_PWR_PVDCallback(void)
 613:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 707              		.loc 1 613 0
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 33


 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              		@ link register save eliminated.
 712 0000 7047     		bx	lr
 713              		.cfi_endproc
 714              	.LFE81:
 716 0002 00BF     		.section	.text.HAL_PWR_PVD_IRQHandler,"ax",%progbits
 717              		.align	2
 718              		.global	HAL_PWR_PVD_IRQHandler
 719              		.thumb
 720              		.thumb_func
 722              	HAL_PWR_PVD_IRQHandler:
 723              	.LFB80:
 596:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check PWR exti flag */
 724              		.loc 1 596 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 596:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check PWR exti flag */
 728              		.loc 1 596 0
 729 0000 08B5     		push	{r3, lr}
 730              	.LCFI1:
 731              		.cfi_def_cfa_offset 8
 732              		.cfi_offset 3, -8
 733              		.cfi_offset 14, -4
 598:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 734              		.loc 1 598 0
 735 0002 064B     		ldr	r3, .L52
 736 0004 5B69     		ldr	r3, [r3, #20]
 737 0006 13F4803F 		tst	r3, #65536
 738 000a 05D0     		beq	.L49
 601:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 739              		.loc 1 601 0
 740 000c FFF7FEFF 		bl	HAL_PWR_PVDCallback
 741              	.LVL18:
 604:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 742              		.loc 1 604 0
 743 0010 4FF48032 		mov	r2, #65536
 744 0014 014B     		ldr	r3, .L52
 745 0016 5A61     		str	r2, [r3, #20]
 746              	.L49:
 747 0018 08BD     		pop	{r3, pc}
 748              	.L53:
 749 001a 00BF     		.align	2
 750              	.L52:
 751 001c 00040140 		.word	1073808384
 752              		.cfi_endproc
 753              	.LFE80:
 755              		.text
 756              	.Letext0:
 757              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160928/arm-none-eabi/include/machine/_default_types
 758              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20160928/arm-none-eabi/include/sys/_stdint.h"
 759              		.file 5 "./Drivers_V1.0.4/CMSIS/Include/core_cm3.h"
 760              		.file 6 "./Drivers_V1.0.4/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 761              		.file 7 "./Drivers_V1.0.4/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 762              		.file 8 "./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_pwr.h"
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 34


ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_pwr.c
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:20     .text.PWR_OverloadWfe:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:24     .text.PWR_OverloadWfe:0000000000000000 PWR_OverloadWfe
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:48     .text.HAL_PWR_DeInit:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:53     .text.HAL_PWR_DeInit:0000000000000000 HAL_PWR_DeInit
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:73     .text.HAL_PWR_DeInit:0000000000000014 $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:78     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:83     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 HAL_PWR_EnableBkUpAccess
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:117    .text.HAL_PWR_DisableBkUpAccess:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:122    .text.HAL_PWR_DisableBkUpAccess:0000000000000000 HAL_PWR_DisableBkUpAccess
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:155    .text.HAL_PWR_ConfigPVD:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:160    .text.HAL_PWR_ConfigPVD:0000000000000000 HAL_PWR_ConfigPVD
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:236    .text.HAL_PWR_ConfigPVD:000000000000007c $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:242    .text.HAL_PWR_EnablePVD:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:247    .text.HAL_PWR_EnablePVD:0000000000000000 HAL_PWR_EnablePVD
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:280    .text.HAL_PWR_DisablePVD:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:285    .text.HAL_PWR_DisablePVD:0000000000000000 HAL_PWR_DisablePVD
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:318    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:323    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 HAL_PWR_EnableWakeUpPin
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:352    .text.HAL_PWR_EnableWakeUpPin:0000000000000014 $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:357    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:362    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 HAL_PWR_DisableWakeUpPin
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:391    .text.HAL_PWR_DisableWakeUpPin:0000000000000014 $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:396    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:401    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 HAL_PWR_EnterSLEEPMode
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:464    .text.HAL_PWR_EnterSLEEPMode:000000000000001c $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:471    .text.HAL_PWR_EnterSTOPMode:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:476    .text.HAL_PWR_EnterSTOPMode:0000000000000000 HAL_PWR_EnterSTOPMode
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:547    .text.HAL_PWR_EnterSTOPMode:0000000000000040 $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:553    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:558    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 HAL_PWR_EnterSTANDBYMode
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:588    .text.HAL_PWR_EnterSTANDBYMode:0000000000000018 $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:596    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:601    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 HAL_PWR_EnableSleepOnExit
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:617    .text.HAL_PWR_EnableSleepOnExit:000000000000000c $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:622    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:627    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 HAL_PWR_DisableSleepOnExit
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:643    .text.HAL_PWR_DisableSleepOnExit:000000000000000c $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:648    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:653    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 HAL_PWR_EnableSEVOnPend
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:669    .text.HAL_PWR_EnableSEVOnPend:000000000000000c $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:674    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:679    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 HAL_PWR_DisableSEVOnPend
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:695    .text.HAL_PWR_DisableSEVOnPend:000000000000000c $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:700    .text.HAL_PWR_PVDCallback:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:705    .text.HAL_PWR_PVDCallback:0000000000000000 HAL_PWR_PVDCallback
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:717    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:722    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 HAL_PWR_PVD_IRQHandler
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccGb8RG8.s:751    .text.HAL_PWR_PVD_IRQHandler:000000000000001c $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
