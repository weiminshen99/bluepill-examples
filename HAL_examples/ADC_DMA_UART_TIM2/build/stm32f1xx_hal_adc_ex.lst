ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_hal_adc_ex.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_ADCEx_Calibration_Start,"ax",%progbits
  20              		.align	2
  21              		.global	HAL_ADCEx_Calibration_Start
  22              		.thumb
  23              		.thumb_func
  25              	HAL_ADCEx_Calibration_Start:
  26              	.LFB64:
  27              		.file 1 "./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c"
   1:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
   2:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************
   3:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @file    stm32f1xx_hal_adc_ex.c
   4:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @author  MCD Application Team
   5:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @version V1.0.4
   6:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @date    29-April-2016
   7:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   9:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          peripheral:
  10:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *           + Operation functions
  11:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Start, stop, get result of conversions of injected
  12:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *                group, using 2 possible modes: polling, interruption.
  13:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Multimode feature (available on devices with 2 ADCs or more)
  14:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Calibration (ADC automatic self-calibration)
  15:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *           + Control functions
  16:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Channels configuration on injected group
  17:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          Other functions (generic functions) are available in file 
  18:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          "stm32f1xx_hal_adc.c".
  19:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  20:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   @verbatim
  21:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   [..] 
  22:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   (@) Sections "ADC peripheral features" and "How to use this driver" are
  23:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       available in file of generic functions "stm32f1xx_hal_adc.c".
  24:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   [..]
  25:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   @endverbatim
  26:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************
  27:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @attention
  28:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  29:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  30:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  31:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 2


  32:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * are permitted provided that the following conditions are met:
  33:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  34:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer.
  35:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  36:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  37:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      and/or other materials provided with the distribution.
  38:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  39:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      may be used to endorse or promote products derived from this software
  40:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      without specific prior written permission.
  41:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  42:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  43:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  44:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  45:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  46:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  47:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  48:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  49:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  50:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  51:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  52:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  53:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************  
  54:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  55:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  56:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Includes ------------------------------------------------------------------*/
  57:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #include "stm32f1xx_hal.h"
  58:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  59:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @addtogroup STM32F1xx_HAL_Driver
  60:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
  61:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  62:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  63:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx ADCEx
  64:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief ADC Extension HAL module driver
  65:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
  66:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  67:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  68:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #ifdef HAL_ADC_MODULE_ENABLED
  69:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  70:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  71:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private define ------------------------------------------------------------*/
  72:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Private_Constants ADCEx Private Constants
  73:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
  74:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  75:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  76:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Delay for ADC calibration:                                               */
  77:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Hardware prerequisite before starting a calibration: the ADC must have   */
  78:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* been in power-on state for at least two ADC clock cycles.                */
  79:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Unit: ADC clock cycles                                                   */
  80:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   #define ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES       ((uint32_t) 2)
  81:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  82:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Timeout value for ADC calibration                                        */
  83:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Value defined to be higher than worst cases: low clocks freq,            */
  84:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* maximum prescaler.                                                       */
  85:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
  86:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
  87:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Unit: ms                                                                 */
  88:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   #define ADC_CALIBRATION_TIMEOUT         ((uint32_t) 10)
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 3


  89:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  90:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Delay for temperature sensor stabilization time.                         */
  91:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
  92:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Unit: us                                                                 */
  93:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   #define ADC_TEMPSENSOR_DELAY_US         ((uint32_t) 10)
  94:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  95:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
  96:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @}
  97:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  98:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  99:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private macro -------------------------------------------------------------*/
 100:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private variables ---------------------------------------------------------*/
 101:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private function prototypes -----------------------------------------------*/
 102:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private functions ---------------------------------------------------------*/
 103:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 104:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions ADCEx Exported Functions
 105:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
 106:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 107:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 108:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group1 Extended Extended IO operation functions
 109:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  *  @brief    Extended Extended Input and Output operation functions
 110:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  *
 111:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @verbatim    
 112:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
 113:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       ##### IO operation functions #####
 114:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
 115:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
 116:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Start conversion of injected group.
 117:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Stop conversion of injected group.
 118:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Poll for conversion complete on injected group.
 119:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Get result of injected channel conversion.
 120:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Start conversion of injected group and enable interruptions.
 121:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Stop conversion of injected group and disable interruptions.
 122:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 123:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Start multimode and enable DMA transfer.
 124:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Stop multimode and disable ADC DMA transfer.
 125:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Get result of multimode conversion.
 126:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 127:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Perform the ADC self-calibration for single or differential ending.
 128:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Get calibration factors for single or differential ending.
 129:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Set calibration factors for single or differential ending.
 130:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 131:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @endverbatim
 132:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
 133:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 134:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 135:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 136:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Perform an ADC automatic self-calibration
 137:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Calibration prerequisite: ADC must be disabled (execute this
 138:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function before HAL_ADC_Start() or after HAL_ADC_Stop() ).
 139:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         During calibration process, ADC is enabled. ADC is let enabled at
 140:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         the completion of this function.
 141:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 142:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 143:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 144:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
 145:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 4


  28              		.loc 1 145 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 82B0     		sub	sp, sp, #8
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 24
  43              	.LVL1:
 146:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 147:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 148:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
  44              		.loc 1 148 0
  45 0004 0023     		movs	r3, #0
  46 0006 0193     		str	r3, [sp, #4]
 149:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 150:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 151:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 152:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 153:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 154:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
  47              		.loc 1 154 0
  48 0008 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
  49 000c 012B     		cmp	r3, #1
  50 000e 69D0     		beq	.L10
  51 0010 0446     		mov	r4, r0
  52              		.loc 1 154 0 is_stmt 0 discriminator 2
  53 0012 0123     		movs	r3, #1
  54 0014 80F82430 		strb	r3, [r0, #36]
 155:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 156:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* 1. Calibration prerequisite:                                             */
 157:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
 158:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*      mode before ADC enable                                              */
 159:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups       */
 160:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Disable ADC peripheral */
 161:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  55              		.loc 1 161 0 is_stmt 1 discriminator 2
  56 0018 FFF7FEFF 		bl	ADC_ConversionStop_Disable
  57              	.LVL2:
 162:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 163:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 164:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
  58              		.loc 1 164 0 discriminator 2
  59 001c 0546     		mov	r5, r0
  60 001e 0028     		cmp	r0, #0
  61 0020 5BD1     		bne	.L3
 165:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 166:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 167:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
  62              		.loc 1 167 0
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 5


  63 0022 A36A     		ldr	r3, [r4, #40]
  64 0024 23F48853 		bic	r3, r3, #4352
  65 0028 23F00203 		bic	r3, r3, #2
  66 002c 43F00203 		orr	r3, r3, #2
  67 0030 A362     		str	r3, [r4, #40]
 168:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 169:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 170:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 171:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Hardware prerequisite: delay before starting the calibration.          */
 172:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
 173:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Wait for the expected ADC clock cycles delay */
 174:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     wait_loop_index = ((SystemCoreClock
 175:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
  68              		.loc 1 175 0
  69 0032 2E4B     		ldr	r3, .L12
  70 0034 1E68     		ldr	r6, [r3]
  71 0036 0220     		movs	r0, #2
  72              	.LVL3:
  73 0038 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
  74              	.LVL4:
  75 003c B6FBF0F0 		udiv	r0, r6, r0
 176:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                        * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
  76              		.loc 1 176 0
  77 0040 4000     		lsls	r0, r0, #1
 174:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
  78              		.loc 1 174 0
  79 0042 0190     		str	r0, [sp, #4]
 177:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 178:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(wait_loop_index != 0)
  80              		.loc 1 178 0
  81 0044 02E0     		b	.L4
  82              	.L5:
 179:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 180:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       wait_loop_index--;
  83              		.loc 1 180 0
  84 0046 019B     		ldr	r3, [sp, #4]
  85 0048 013B     		subs	r3, r3, #1
  86 004a 0193     		str	r3, [sp, #4]
  87              	.L4:
 178:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
  88              		.loc 1 178 0
  89 004c 019B     		ldr	r3, [sp, #4]
  90 004e 002B     		cmp	r3, #0
  91 0050 F9D1     		bne	.L5
 181:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 182:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 183:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* 2. Enable the ADC peripheral */
 184:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_Enable(hadc);
  92              		.loc 1 184 0
  93 0052 2046     		mov	r0, r4
  94 0054 FFF7FEFF 		bl	ADC_Enable
  95              	.LVL5:
 185:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 186:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* 3. Resets ADC calibration registers */  
 187:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
  96              		.loc 1 187 0
  97 0058 2268     		ldr	r2, [r4]
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 6


  98 005a 9368     		ldr	r3, [r2, #8]
  99 005c 43F00803 		orr	r3, r3, #8
 100 0060 9360     		str	r3, [r2, #8]
 188:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 189:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 101              		.loc 1 189 0
 102 0062 FFF7FEFF 		bl	HAL_GetTick
 103              	.LVL6:
 104 0066 0646     		mov	r6, r0
 105              	.LVL7:
 190:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 191:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Wait for calibration reset completion */
 192:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 106              		.loc 1 192 0
 107 0068 0FE0     		b	.L6
 108              	.LVL8:
 109              	.L7:
 193:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 194:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 110              		.loc 1 194 0
 111 006a FFF7FEFF 		bl	HAL_GetTick
 112              	.LVL9:
 113 006e 801B     		subs	r0, r0, r6
 114 0070 0A28     		cmp	r0, #10
 115 0072 0AD9     		bls	.L6
 195:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 196:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 197:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 116              		.loc 1 197 0
 117 0074 A36A     		ldr	r3, [r4, #40]
 118 0076 23F01203 		bic	r3, r3, #18
 119 007a 43F01003 		orr	r3, r3, #16
 120 007e A362     		str	r3, [r4, #40]
 198:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 199:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 200:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 201:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 202:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 121              		.loc 1 202 0
 122 0080 0023     		movs	r3, #0
 123 0082 84F82430 		strb	r3, [r4, #36]
 203:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 204:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 124              		.loc 1 204 0
 125 0086 0120     		movs	r0, #1
 126 0088 2DE0     		b	.L2
 127              	.L6:
 192:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 128              		.loc 1 192 0
 129 008a 2368     		ldr	r3, [r4]
 130 008c 9A68     		ldr	r2, [r3, #8]
 131 008e 12F0080F 		tst	r2, #8
 132 0092 EAD1     		bne	.L7
 205:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 206:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 207:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 208:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 7


 209:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* 4. Start ADC calibration */
 210:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 133              		.loc 1 210 0
 134 0094 9A68     		ldr	r2, [r3, #8]
 135 0096 42F00402 		orr	r2, r2, #4
 136 009a 9A60     		str	r2, [r3, #8]
 211:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 212:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 137              		.loc 1 212 0
 138 009c FFF7FEFF 		bl	HAL_GetTick
 139              	.LVL10:
 140 00a0 0646     		mov	r6, r0
 141              	.LVL11:
 213:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 214:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Wait for calibration completion */
 215:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 142              		.loc 1 215 0
 143 00a2 0FE0     		b	.L8
 144              	.LVL12:
 145              	.L9:
 216:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 217:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 146              		.loc 1 217 0
 147 00a4 FFF7FEFF 		bl	HAL_GetTick
 148              	.LVL13:
 149 00a8 801B     		subs	r0, r0, r6
 150 00aa 0A28     		cmp	r0, #10
 151 00ac 0AD9     		bls	.L8
 218:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 219:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 220:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 152              		.loc 1 220 0
 153 00ae A36A     		ldr	r3, [r4, #40]
 154 00b0 23F01203 		bic	r3, r3, #18
 155 00b4 43F01003 		orr	r3, r3, #16
 156 00b8 A362     		str	r3, [r4, #40]
 221:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 222:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 223:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 224:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 225:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 157              		.loc 1 225 0
 158 00ba 0023     		movs	r3, #0
 159 00bc 84F82430 		strb	r3, [r4, #36]
 226:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 227:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 160              		.loc 1 227 0
 161 00c0 0120     		movs	r0, #1
 162 00c2 10E0     		b	.L2
 163              	.L8:
 215:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 164              		.loc 1 215 0
 165 00c4 2368     		ldr	r3, [r4]
 166 00c6 9B68     		ldr	r3, [r3, #8]
 167 00c8 13F0040F 		tst	r3, #4
 168 00cc EAD1     		bne	.L9
 228:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 8


 229:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 230:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 231:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 232:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 169              		.loc 1 232 0
 170 00ce A36A     		ldr	r3, [r4, #40]
 171 00d0 23F00303 		bic	r3, r3, #3
 172 00d4 43F00103 		orr	r3, r3, #1
 173 00d8 A362     		str	r3, [r4, #40]
 174              	.LVL14:
 175              	.L3:
 233:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 234:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
 235:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 236:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 237:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 238:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 176              		.loc 1 238 0
 177 00da 0023     		movs	r3, #0
 178 00dc 84F82430 		strb	r3, [r4, #36]
 239:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 240:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 241:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 179              		.loc 1 241 0
 180 00e0 2846     		mov	r0, r5
 181 00e2 00E0     		b	.L2
 182              	.LVL15:
 183              	.L10:
 154:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 184              		.loc 1 154 0
 185 00e4 0220     		movs	r0, #2
 186              	.LVL16:
 187              	.L2:
 242:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 188              		.loc 1 242 0
 189 00e6 02B0     		add	sp, sp, #8
 190              	.LCFI2:
 191              		.cfi_def_cfa_offset 16
 192              		@ sp needed
 193 00e8 70BD     		pop	{r4, r5, r6, pc}
 194              	.L13:
 195 00ea 00BF     		.align	2
 196              	.L12:
 197 00ec 00000000 		.word	SystemCoreClock
 198              		.cfi_endproc
 199              	.LFE64:
 201              		.section	.text.HAL_ADCEx_InjectedStart,"ax",%progbits
 202              		.align	2
 203              		.global	HAL_ADCEx_InjectedStart
 204              		.thumb
 205              		.thumb_func
 207              	HAL_ADCEx_InjectedStart:
 208              	.LFB65:
 243:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 244:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 245:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group.
 246:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Interruptions enabled in this function: None.
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 9


 247:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 248:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 249:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 250:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
 251:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 209              		.loc 1 251 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              	.LVL17:
 252:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 253:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 254:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 255:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 256:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 257:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 258:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 214              		.loc 1 258 0
 215 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 216 0004 012B     		cmp	r3, #1
 217 0006 54D0     		beq	.L23
 251:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 218              		.loc 1 251 0 discriminator 2
 219 0008 10B5     		push	{r4, lr}
 220              	.LCFI3:
 221              		.cfi_def_cfa_offset 8
 222              		.cfi_offset 4, -8
 223              		.cfi_offset 14, -4
 224 000a 0446     		mov	r4, r0
 225              		.loc 1 258 0 discriminator 2
 226 000c 0123     		movs	r3, #1
 227 000e 80F82430 		strb	r3, [r0, #36]
 259:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 260:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 261:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 228              		.loc 1 261 0 discriminator 2
 229 0012 FFF7FEFF 		bl	ADC_Enable
 230              	.LVL18:
 262:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 263:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
 264:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 231              		.loc 1 264 0 discriminator 2
 232 0016 0346     		mov	r3, r0
 233 0018 0028     		cmp	r0, #0
 234 001a 46D1     		bne	.L16
 265:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 266:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
 267:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
 268:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
 269:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 235              		.loc 1 269 0
 236 001c A26A     		ldr	r2, [r4, #40]
 237 001e 22F44052 		bic	r2, r2, #12288
 238 0022 22F00102 		bic	r2, r2, #1
 239 0026 42F48052 		orr	r2, r2, #4096
 240 002a A262     		str	r2, [r4, #40]
 270:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 10


 271:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
 272:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 273:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Case of independent mode or multimode (for devices with several ADCs): */
 274:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set multimode state.                                                   */
 275:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 241              		.loc 1 275 0
 242 002c 2168     		ldr	r1, [r4]
 243 002e 234A     		ldr	r2, .L26
 244 0030 9142     		cmp	r1, r2
 245 0032 05D1     		bne	.L17
 246              		.loc 1 275 0 is_stmt 0 discriminator 1
 247 0034 A2F58062 		sub	r2, r2, #1024
 248 0038 5268     		ldr	r2, [r2, #4]
 249 003a 12F4702F 		tst	r2, #983040
 250 003e 04D1     		bne	.L18
 251              	.L17:
 276:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 277:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 252              		.loc 1 277 0 is_stmt 1
 253 0040 A26A     		ldr	r2, [r4, #40]
 254 0042 22F48012 		bic	r2, r2, #1048576
 255 0046 A262     		str	r2, [r4, #40]
 256 0048 03E0     		b	.L19
 257              	.L18:
 278:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 279:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 280:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 281:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 258              		.loc 1 281 0
 259 004a A26A     		ldr	r2, [r4, #40]
 260 004c 42F48012 		orr	r2, r2, #1048576
 261 0050 A262     		str	r2, [r4, #40]
 262              	.L19:
 282:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 283:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 284:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
 285:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
 286:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
 287:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
 288:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 263              		.loc 1 288 0
 264 0052 A26A     		ldr	r2, [r4, #40]
 265 0054 12F4807F 		tst	r2, #256
 266 0058 01D1     		bne	.L20
 289:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 290:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
 291:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 267              		.loc 1 291 0
 268 005a 0022     		movs	r2, #0
 269 005c E262     		str	r2, [r4, #44]
 270              	.L20:
 292:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 293:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 294:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 295:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 296:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 297:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 11


 271              		.loc 1 297 0
 272 005e 0022     		movs	r2, #0
 273 0060 84F82420 		strb	r2, [r4, #36]
 298:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 299:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 300:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 301:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 274              		.loc 1 301 0
 275 0064 6FF00402 		mvn	r2, #4
 276 0068 0A60     		str	r2, [r1]
 302:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 303:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Enable conversion of injected group.                                   */
 304:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If software start has been selected, conversion starts immediately.    */
 305:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 306:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 307:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
 308:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
 309:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
 310:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* slave, ADC is enabled only (conversion is not started). If ADC is      */
 311:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* master, ADC is enabled and conversion is started.                      */
 312:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 277              		.loc 1 312 0
 278 006a 2268     		ldr	r2, [r4]
 279 006c 5168     		ldr	r1, [r2, #4]
 280 006e 11F4806F 		tst	r1, #1024
 281 0072 20D1     		bne	.L24
 313:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 314:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 282              		.loc 1 314 0
 283 0074 9168     		ldr	r1, [r2, #8]
 284 0076 01F4E041 		and	r1, r1, #28672
 285 007a B1F5E04F 		cmp	r1, #28672
 286 007e 0ED1     		bne	.L21
 287              		.loc 1 314 0 is_stmt 0 discriminator 1
 288 0080 0E49     		ldr	r1, .L26
 289 0082 8A42     		cmp	r2, r1
 290 0084 05D1     		bne	.L22
 315:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 291              		.loc 1 315 0 is_stmt 1 discriminator 2
 292 0086 A1F58061 		sub	r1, r1, #1024
 293 008a 4968     		ldr	r1, [r1, #4]
 314:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 294              		.loc 1 314 0 discriminator 2
 295 008c 11F4702F 		tst	r1, #983040
 296 0090 05D1     		bne	.L21
 297              	.L22:
 316:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 317:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with SW start */
 318:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 298              		.loc 1 318 0
 299 0092 9168     		ldr	r1, [r2, #8]
 300 0094 41F40211 		orr	r1, r1, #2129920
 301 0098 9160     		str	r1, [r2, #8]
 319:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 320:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
 321:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 322:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with external trigger */
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 12


 323:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 324:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 325:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 326:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 327:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 328:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 329:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 330:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 331:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 332:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 333:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 334:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 302              		.loc 1 334 0
 303 009a 1846     		mov	r0, r3
 304              	.LVL19:
 318:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 305              		.loc 1 318 0
 306 009c 10BD     		pop	{r4, pc}
 307              	.LVL20:
 308              	.L21:
 323:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 309              		.loc 1 323 0
 310 009e 9168     		ldr	r1, [r2, #8]
 311 00a0 41F40041 		orr	r1, r1, #32768
 312 00a4 9160     		str	r1, [r2, #8]
 313              		.loc 1 334 0
 314 00a6 1846     		mov	r0, r3
 315              	.LVL21:
 316 00a8 10BD     		pop	{r4, pc}
 317              	.LVL22:
 318              	.L16:
 330:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 319              		.loc 1 330 0
 320 00aa 0022     		movs	r2, #0
 321 00ac 84F82420 		strb	r2, [r4, #36]
 322 00b0 10BD     		pop	{r4, pc}
 323              	.LVL23:
 324              	.L23:
 325              	.LCFI4:
 326              		.cfi_def_cfa_offset 0
 327              		.cfi_restore 4
 328              		.cfi_restore 14
 258:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 329              		.loc 1 258 0
 330 00b2 0220     		movs	r0, #2
 331              	.LVL24:
 335:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 332              		.loc 1 335 0
 333 00b4 7047     		bx	lr
 334              	.LVL25:
 335              	.L24:
 336              	.LCFI5:
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 4, -8
 339              		.cfi_offset 14, -4
 334:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 340              		.loc 1 334 0
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 13


 341 00b6 1846     		mov	r0, r3
 342              	.LVL26:
 343              		.loc 1 335 0
 344 00b8 10BD     		pop	{r4, pc}
 345              	.LVL27:
 346              	.L27:
 347 00ba 00BF     		.align	2
 348              	.L26:
 349 00bc 00280140 		.word	1073817600
 350              		.cfi_endproc
 351              	.LFE65:
 353              		.section	.text.HAL_ADCEx_InjectedStop,"ax",%progbits
 354              		.align	2
 355              		.global	HAL_ADCEx_InjectedStop
 356              		.thumb
 357              		.thumb_func
 359              	HAL_ADCEx_InjectedStop:
 360              	.LFB66:
 336:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 337:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 338:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels. Disable ADC peripheral if
 339:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         no regular conversion is on going.
 340:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
 341:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 342:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 343:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 344:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 345:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
 346:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 347:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 348:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 349:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
 350:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 361              		.loc 1 350 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              	.LVL28:
 351:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 352:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 353:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 354:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 355:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 356:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 357:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 366              		.loc 1 357 0
 367 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 368 0004 012B     		cmp	r3, #1
 369 0006 24D0     		beq	.L32
 350:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 370              		.loc 1 350 0 discriminator 2
 371 0008 10B5     		push	{r4, lr}
 372              	.LCFI6:
 373              		.cfi_def_cfa_offset 8
 374              		.cfi_offset 4, -8
 375              		.cfi_offset 14, -4
 376 000a 0446     		mov	r4, r0
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 14


 377              		.loc 1 357 0 discriminator 2
 378 000c 0123     		movs	r3, #1
 379 000e 80F82430 		strb	r3, [r0, #36]
 358:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 359:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
 360:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
 361:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
 362:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
 363:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   are common)                                                            */
 364:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
 365:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 380              		.loc 1 365 0 discriminator 2
 381 0012 836A     		ldr	r3, [r0, #40]
 382 0014 13F4807F 		tst	r3, #256
 383 0018 11D1     		bne	.L30
 366:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 384              		.loc 1 366 0 discriminator 1
 385 001a 0368     		ldr	r3, [r0]
 386 001c 5B68     		ldr	r3, [r3, #4]
 365:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 387              		.loc 1 365 0 discriminator 1
 388 001e 13F4806F 		tst	r3, #1024
 389 0022 0CD1     		bne	.L30
 367:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 368:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
 369:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
 370:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 390              		.loc 1 370 0
 391 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 392              	.LVL29:
 371:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 372:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 373:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 393              		.loc 1 373 0
 394 0028 0346     		mov	r3, r0
 395 002a 68B9     		cbnz	r0, .L31
 374:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 375:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set ADC state */
 376:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 396              		.loc 1 376 0
 397 002c A26A     		ldr	r2, [r4, #40]
 398 002e 22F48852 		bic	r2, r2, #4352
 399 0032 22F00102 		bic	r2, r2, #1
 400 0036 42F00102 		orr	r2, r2, #1
 401 003a A262     		str	r2, [r4, #40]
 402 003c 04E0     		b	.L31
 403              	.LVL30:
 404              	.L30:
 377:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 378:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 379:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 380:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 381:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 382:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 383:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 384:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 405              		.loc 1 384 0
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 15


 406 003e A36A     		ldr	r3, [r4, #40]
 407 0040 43F02003 		orr	r3, r3, #32
 408 0044 A362     		str	r3, [r4, #40]
 409              	.LVL31:
 385:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 386:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 410              		.loc 1 386 0
 411 0046 0123     		movs	r3, #1
 412              	.LVL32:
 413              	.L31:
 387:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 388:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 389:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 390:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 414              		.loc 1 390 0
 415 0048 0022     		movs	r2, #0
 416 004a 84F82420 		strb	r2, [r4, #36]
 391:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 392:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 393:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 417              		.loc 1 393 0
 418 004e 1846     		mov	r0, r3
 419 0050 10BD     		pop	{r4, pc}
 420              	.LVL33:
 421              	.L32:
 422              	.LCFI7:
 423              		.cfi_def_cfa_offset 0
 424              		.cfi_restore 4
 425              		.cfi_restore 14
 357:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 426              		.loc 1 357 0
 427 0052 0220     		movs	r0, #2
 428              	.LVL34:
 429 0054 7047     		bx	lr
 430              		.cfi_endproc
 431              	.LFE66:
 433 0056 00BF     		.section	.text.HAL_ADCEx_InjectedPollForConversion,"ax",%progbits
 434              		.align	2
 435              		.global	HAL_ADCEx_InjectedPollForConversion
 436              		.thumb
 437              		.thumb_func
 439              	HAL_ADCEx_InjectedPollForConversion:
 440              	.LFB67:
 394:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 395:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 396:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 397:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Wait for injected group conversion to be completed.
 398:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 399:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.
 400:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 401:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 402:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 403:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 441              		.loc 1 403 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 8
 444              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 16


 445              	.LVL35:
 446 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 447              	.LCFI8:
 448              		.cfi_def_cfa_offset 20
 449              		.cfi_offset 4, -20
 450              		.cfi_offset 5, -16
 451              		.cfi_offset 6, -12
 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 83B0     		sub	sp, sp, #12
 455              	.LCFI9:
 456              		.cfi_def_cfa_offset 32
 457 0004 0546     		mov	r5, r0
 458 0006 0C46     		mov	r4, r1
 404:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 405:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 406:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
 407:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion.                                                              */
 408:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
 459              		.loc 1 408 0
 460 0008 0023     		movs	r3, #0
 461 000a 0193     		str	r3, [sp, #4]
 462              	.LVL36:
 409:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0;
 410:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 411:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 412:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 413:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 414:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Get timeout */
 415:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
 463              		.loc 1 415 0
 464 000c FFF7FEFF 		bl	HAL_GetTick
 465              	.LVL37:
 466 0010 0646     		mov	r6, r0
 467              	.LVL38:
 416:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      
 417:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
 418:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion.                                                              */
 419:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* For injected group, flag JEOC is set only at the end of the sequence,    */
 420:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* not for each conversion within the sequence.                             */
 421:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - If single conversion for injected group (scan mode disabled or        */
 422:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion ==1), flag JEOC is used to determine the      */
 423:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    conversion completion.                                                */
 424:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - If sequence conversion for injected group (scan mode enabled and      */
 425:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion >=2), flag JEOC is set only at the end of the */
 426:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    sequence.                                                             */
 427:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
 428:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
 429:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
 430:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
 431:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    As flag JEOC is not set after each conversion, no timeout status can  */
 432:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    be set.                                                               */
 433:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 468              		.loc 1 433 0
 469 0012 2B68     		ldr	r3, [r5]
 470 0014 9B6B     		ldr	r3, [r3, #56]
 471 0016 13F4401F 		tst	r3, #3145728
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 17


 472 001a 12D0     		beq	.L38
 473 001c 17E0     		b	.L60
 474              	.LVL39:
 475              	.L41:
 434:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 435:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Wait until End of Conversion flag is raised */
 436:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 437:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 438:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
 439:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 476              		.loc 1 439 0
 477 001e B4F1FF3F 		cmp	r4, #-1
 478 0022 0ED0     		beq	.L38
 440:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 441:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 479              		.loc 1 441 0
 480 0024 24B1     		cbz	r4, .L39
 481              		.loc 1 441 0 is_stmt 0 discriminator 1
 482 0026 FFF7FEFF 		bl	HAL_GetTick
 483              	.LVL40:
 484 002a 801B     		subs	r0, r0, r6
 485 002c 8442     		cmp	r4, r0
 486 002e 08D2     		bcs	.L38
 487              	.L39:
 442:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         {
 443:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
 444:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 488              		.loc 1 444 0 is_stmt 1
 489 0030 AB6A     		ldr	r3, [r5, #40]
 490 0032 43F00403 		orr	r3, r3, #4
 491 0036 AB62     		str	r3, [r5, #40]
 445:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           
 446:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Process unlocked */
 447:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 492              		.loc 1 447 0
 493 0038 0023     		movs	r3, #0
 494 003a 85F82430 		strb	r3, [r5, #36]
 448:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           
 449:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 495              		.loc 1 449 0
 496 003e 0320     		movs	r0, #3
 497 0040 87E0     		b	.L40
 498              	.L38:
 436:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 499              		.loc 1 436 0
 500 0042 2B68     		ldr	r3, [r5]
 501 0044 1B68     		ldr	r3, [r3]
 502 0046 13F0040F 		tst	r3, #4
 503 004a E8D0     		beq	.L41
 504 004c 51E0     		b	.L42
 505              	.LVL41:
 506              	.L60:
 450:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         }
 451:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 452:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 453:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 454:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 18


 455:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 456:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Replace polling by wait for maximum conversion time */
 457:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
 458:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
 459:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
 460:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 461:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 507              		.loc 1 461 0
 508 004e 424B     		ldr	r3, .L62
 509 0050 1F68     		ldr	r7, [r3]
 510 0052 0220     		movs	r0, #2
 511              	.LVL42:
 512 0054 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 513              	.LVL43:
 514 0058 B7FBF0F0 		udiv	r0, r7, r0
 462:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 515              		.loc 1 462 0
 516 005c 2B68     		ldr	r3, [r5]
 517 005e 1969     		ldr	r1, [r3, #16]
 518 0060 3E4A     		ldr	r2, .L62+4
 519 0062 1142     		tst	r1, r2
 520 0064 0ED1     		bne	.L43
 521              		.loc 1 462 0 is_stmt 0 discriminator 1
 522 0066 D968     		ldr	r1, [r3, #12]
 523 0068 02F15C42 		add	r2, r2, #-603979776
 524 006c 1142     		tst	r1, r2
 525 006e 09D1     		bne	.L43
 526              		.loc 1 462 0 discriminator 3
 527 0070 1969     		ldr	r1, [r3, #16]
 528 0072 3B4A     		ldr	r2, .L62+8
 529 0074 1142     		tst	r1, r2
 530 0076 18D1     		bne	.L51
 531              		.loc 1 462 0 discriminator 5
 532 0078 DA68     		ldr	r2, [r3, #12]
 533 007a 3A4B     		ldr	r3, .L62+12
 534 007c 1A42     		tst	r2, r3
 535 007e 16D0     		beq	.L52
 536              		.loc 1 462 0
 537 0080 2927     		movs	r7, #41
 538 0082 1BE0     		b	.L44
 539              	.L43:
 540              		.loc 1 462 0 discriminator 4
 541 0084 1969     		ldr	r1, [r3, #16]
 542 0086 364A     		ldr	r2, .L62+8
 543 0088 1142     		tst	r1, r2
 544 008a 04D1     		bne	.L45
 545              		.loc 1 462 0 discriminator 11
 546 008c D968     		ldr	r1, [r3, #12]
 547 008e 02F16E42 		add	r2, r2, #-301989888
 548 0092 1142     		tst	r1, r2
 549 0094 0DD0     		beq	.L53
 550              	.L45:
 551              		.loc 1 462 0 discriminator 14
 552 0096 1969     		ldr	r1, [r3, #16]
 553 0098 334A     		ldr	r2, .L62+16
 554 009a 0A40     		ands	r2, r2, r1
 555 009c 5AB9     		cbnz	r2, .L54
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 19


 556              		.loc 1 462 0 discriminator 15
 557 009e DA68     		ldr	r2, [r3, #12]
 558 00a0 314B     		ldr	r3, .L62+16
 559 00a2 1340     		ands	r3, r3, r2
 560 00a4 4BB1     		cbz	r3, .L55
 561              		.loc 1 462 0
 562 00a6 FC27     		movs	r7, #252
 563 00a8 08E0     		b	.L44
 564              	.L51:
 565 00aa 2927     		movs	r7, #41
 566 00ac 06E0     		b	.L44
 567              	.L52:
 568 00ae 1427     		movs	r7, #20
 569 00b0 04E0     		b	.L44
 570              	.L53:
 571 00b2 5427     		movs	r7, #84
 572 00b4 02E0     		b	.L44
 573              	.L54:
 574 00b6 FC27     		movs	r7, #252
 575 00b8 00E0     		b	.L44
 576              	.L55:
 577 00ba 5427     		movs	r7, #84
 578              	.L44:
 460:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 579              		.loc 1 460 0 is_stmt 1
 580 00bc 00FB07F7 		mul	r7, r0, r7
 581              	.LVL44:
 463:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 464:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 582              		.loc 1 464 0
 583 00c0 14E0     		b	.L46
 584              	.L49:
 465:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 466:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
 467:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 585              		.loc 1 467 0
 586 00c2 B4F1FF3F 		cmp	r4, #-1
 587 00c6 0ED0     		beq	.L47
 468:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 469:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 588              		.loc 1 469 0
 589 00c8 24B1     		cbz	r4, .L48
 590              		.loc 1 469 0 is_stmt 0 discriminator 1
 591 00ca FFF7FEFF 		bl	HAL_GetTick
 592              	.LVL45:
 593 00ce 801B     		subs	r0, r0, r6
 594 00d0 8442     		cmp	r4, r0
 595 00d2 08D2     		bcs	.L47
 596              	.L48:
 470:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         {
 471:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
 472:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 597              		.loc 1 472 0 is_stmt 1
 598 00d4 AB6A     		ldr	r3, [r5, #40]
 599 00d6 43F00403 		orr	r3, r3, #4
 600 00da AB62     		str	r3, [r5, #40]
 473:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 20


 474:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Process unlocked */
 475:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 601              		.loc 1 475 0
 602 00dc 0023     		movs	r3, #0
 603 00de 85F82430 		strb	r3, [r5, #36]
 476:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           
 477:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 604              		.loc 1 477 0
 605 00e2 0320     		movs	r0, #3
 606 00e4 35E0     		b	.L40
 607              	.L47:
 478:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         }
 479:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 480:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       Conversion_Timeout_CPU_cycles ++;
 608              		.loc 1 480 0
 609 00e6 019B     		ldr	r3, [sp, #4]
 610 00e8 0133     		adds	r3, r3, #1
 611 00ea 0193     		str	r3, [sp, #4]
 612              	.L46:
 464:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 613              		.loc 1 464 0
 614 00ec 019B     		ldr	r3, [sp, #4]
 615 00ee 9F42     		cmp	r7, r3
 616 00f0 E7D8     		bhi	.L49
 617              	.LVL46:
 618              	.L42:
 481:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 482:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 483:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 484:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Clear injected group conversion flag */
 485:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
 486:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* simultaneously.                                                          */
 487:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 619              		.loc 1 487 0
 620 00f2 2B68     		ldr	r3, [r5]
 621 00f4 6FF00E02 		mvn	r2, #14
 622 00f8 1A60     		str	r2, [r3]
 488:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 489:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Update ADC state machine */
 490:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 623              		.loc 1 490 0
 624 00fa AB6A     		ldr	r3, [r5, #40]
 625 00fc 43F40053 		orr	r3, r3, #8192
 626 0100 AB62     		str	r3, [r5, #40]
 491:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 492:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group injected      */
 493:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* by external trigger or by automatic injected conversion                  */
 494:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* from group regular.                                                      */
 495:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 627              		.loc 1 495 0
 628 0102 2A68     		ldr	r2, [r5]
 629 0104 9368     		ldr	r3, [r2, #8]
 630 0106 03F4E043 		and	r3, r3, #28672
 631 010a B3F5E04F 		cmp	r3, #28672
 632 010e 0BD0     		beq	.L50
 496:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 633              		.loc 1 496 0 discriminator 1
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 21


 634 0110 5368     		ldr	r3, [r2, #4]
 495:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 635              		.loc 1 495 0 discriminator 1
 636 0112 13F4806F 		tst	r3, #1024
 637 0116 15D1     		bne	.L56
 497:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 638              		.loc 1 497 0
 639 0118 9368     		ldr	r3, [r2, #8]
 640 011a 03F46023 		and	r3, r3, #917504
 496:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 641              		.loc 1 496 0
 642 011e B3F5602F 		cmp	r3, #917504
 643 0122 11D1     		bne	.L57
 498:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 644              		.loc 1 498 0
 645 0124 EB68     		ldr	r3, [r5, #12]
 497:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 646              		.loc 1 497 0
 647 0126 8BB9     		cbnz	r3, .L58
 648              	.L50:
 499:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 500:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 501:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 649              		.loc 1 501 0
 650 0128 AB6A     		ldr	r3, [r5, #40]
 651 012a 23F48053 		bic	r3, r3, #4096
 652 012e AB62     		str	r3, [r5, #40]
 502:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 503:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 653              		.loc 1 503 0
 654 0130 AB6A     		ldr	r3, [r5, #40]
 655 0132 13F4807F 		tst	r3, #256
 656 0136 0BD1     		bne	.L59
 504:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 505:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 657              		.loc 1 505 0
 658 0138 AB6A     		ldr	r3, [r5, #40]
 659 013a 43F00103 		orr	r3, r3, #1
 660 013e AB62     		str	r3, [r5, #40]
 506:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 507:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 508:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 509:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC state */
 510:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return HAL_OK;
 661              		.loc 1 510 0
 662 0140 0020     		movs	r0, #0
 663 0142 06E0     		b	.L40
 664              	.L56:
 665 0144 0020     		movs	r0, #0
 666 0146 04E0     		b	.L40
 667              	.L57:
 668 0148 0020     		movs	r0, #0
 669 014a 02E0     		b	.L40
 670              	.L58:
 671 014c 0020     		movs	r0, #0
 672 014e 00E0     		b	.L40
 673              	.L59:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 22


 674 0150 0020     		movs	r0, #0
 675              	.L40:
 511:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 676              		.loc 1 511 0
 677 0152 03B0     		add	sp, sp, #12
 678              	.LCFI10:
 679              		.cfi_def_cfa_offset 20
 680              		@ sp needed
 681 0154 F0BD     		pop	{r4, r5, r6, r7, pc}
 682              	.LVL47:
 683              	.L63:
 684 0156 00BF     		.align	2
 685              	.L62:
 686 0158 00000000 		.word	SystemCoreClock
 687 015c 24499224 		.word	613566756
 688 0160 92244912 		.word	306783378
 689 0164 92244900 		.word	4793490
 690 0168 49922400 		.word	2396745
 691              		.cfi_endproc
 692              	.LFE67:
 694              		.section	.text.HAL_ADCEx_InjectedStart_IT,"ax",%progbits
 695              		.align	2
 696              		.global	HAL_ADCEx_InjectedStart_IT
 697              		.thumb
 698              		.thumb_func
 700              	HAL_ADCEx_InjectedStart_IT:
 701              	.LFB68:
 512:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 513:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 514:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group with interruption.
 515:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - JEOC (end of conversion of injected group)
 516:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
 517:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 518:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status.
 519:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 520:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
 521:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 702              		.loc 1 521 0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 0, uses_anonymous_args = 0
 706              	.LVL48:
 522:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 523:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 524:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 525:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 526:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 527:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 528:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 707              		.loc 1 528 0
 708 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 709 0004 012B     		cmp	r3, #1
 710 0006 59D0     		beq	.L73
 521:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 711              		.loc 1 521 0 discriminator 2
 712 0008 10B5     		push	{r4, lr}
 713              	.LCFI11:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 23


 714              		.cfi_def_cfa_offset 8
 715              		.cfi_offset 4, -8
 716              		.cfi_offset 14, -4
 717 000a 0446     		mov	r4, r0
 718              		.loc 1 528 0 discriminator 2
 719 000c 0123     		movs	r3, #1
 720 000e 80F82430 		strb	r3, [r0, #36]
 529:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 530:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 531:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 721              		.loc 1 531 0 discriminator 2
 722 0012 FFF7FEFF 		bl	ADC_Enable
 723              	.LVL49:
 532:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 533:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
 534:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 724              		.loc 1 534 0 discriminator 2
 725 0016 0346     		mov	r3, r0
 726 0018 0028     		cmp	r0, #0
 727 001a 4BD1     		bne	.L66
 535:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 536:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
 537:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
 538:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
 539:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 728              		.loc 1 539 0
 729 001c A26A     		ldr	r2, [r4, #40]
 730 001e 22F44052 		bic	r2, r2, #12288
 731 0022 22F00102 		bic	r2, r2, #1
 732 0026 42F48052 		orr	r2, r2, #4096
 733 002a A262     		str	r2, [r4, #40]
 540:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 541:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
 542:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 543:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Case of independent mode or multimode (for devices with several ADCs): */
 544:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set multimode state.                                                   */
 545:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 734              		.loc 1 545 0
 735 002c 2168     		ldr	r1, [r4]
 736 002e 254A     		ldr	r2, .L76
 737 0030 9142     		cmp	r1, r2
 738 0032 05D1     		bne	.L67
 739              		.loc 1 545 0 is_stmt 0 discriminator 1
 740 0034 A2F58062 		sub	r2, r2, #1024
 741 0038 5268     		ldr	r2, [r2, #4]
 742 003a 12F4702F 		tst	r2, #983040
 743 003e 04D1     		bne	.L68
 744              	.L67:
 546:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 547:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 745              		.loc 1 547 0 is_stmt 1
 746 0040 A26A     		ldr	r2, [r4, #40]
 747 0042 22F48012 		bic	r2, r2, #1048576
 748 0046 A262     		str	r2, [r4, #40]
 749 0048 03E0     		b	.L69
 750              	.L68:
 548:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 24


 549:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 550:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 551:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 751              		.loc 1 551 0
 752 004a A26A     		ldr	r2, [r4, #40]
 753 004c 42F48012 		orr	r2, r2, #1048576
 754 0050 A262     		str	r2, [r4, #40]
 755              	.L69:
 552:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 553:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 554:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
 555:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
 556:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
 557:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
 558:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 756              		.loc 1 558 0
 757 0052 A26A     		ldr	r2, [r4, #40]
 758 0054 12F4807F 		tst	r2, #256
 759 0058 01D1     		bne	.L70
 559:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 560:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
 561:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 760              		.loc 1 561 0
 761 005a 0022     		movs	r2, #0
 762 005c E262     		str	r2, [r4, #44]
 763              	.L70:
 562:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 563:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 564:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 565:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 566:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 567:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 764              		.loc 1 567 0
 765 005e 0022     		movs	r2, #0
 766 0060 84F82420 		strb	r2, [r4, #36]
 568:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 569:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 570:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 571:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 767              		.loc 1 571 0
 768 0064 6FF00402 		mvn	r2, #4
 769 0068 0A60     		str	r2, [r1]
 572:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 573:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Enable end of conversion interrupt for injected channels */
 574:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 770              		.loc 1 574 0
 771 006a 2168     		ldr	r1, [r4]
 772 006c 4A68     		ldr	r2, [r1, #4]
 773 006e 42F08002 		orr	r2, r2, #128
 774 0072 4A60     		str	r2, [r1, #4]
 575:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 576:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Start conversion of injected group if software start has been selected */
 577:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* and if automatic injected conversion is disabled.                      */
 578:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 579:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 580:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
 581:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 25


 582:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 775              		.loc 1 582 0
 776 0074 2268     		ldr	r2, [r4]
 777 0076 5168     		ldr	r1, [r2, #4]
 778 0078 11F4806F 		tst	r1, #1024
 779 007c 20D1     		bne	.L74
 583:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 584:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 780              		.loc 1 584 0
 781 007e 9168     		ldr	r1, [r2, #8]
 782 0080 01F4E041 		and	r1, r1, #28672
 783 0084 B1F5E04F 		cmp	r1, #28672
 784 0088 0ED1     		bne	.L71
 785              		.loc 1 584 0 is_stmt 0 discriminator 1
 786 008a 0E49     		ldr	r1, .L76
 787 008c 8A42     		cmp	r2, r1
 788 008e 05D1     		bne	.L72
 585:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 789              		.loc 1 585 0 is_stmt 1 discriminator 2
 790 0090 A1F58061 		sub	r1, r1, #1024
 791 0094 4968     		ldr	r1, [r1, #4]
 584:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 792              		.loc 1 584 0 discriminator 2
 793 0096 11F4702F 		tst	r1, #983040
 794 009a 05D1     		bne	.L71
 795              	.L72:
 586:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 587:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with SW start */
 588:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 796              		.loc 1 588 0
 797 009c 9168     		ldr	r1, [r2, #8]
 798 009e 41F40211 		orr	r1, r1, #2129920
 799 00a2 9160     		str	r1, [r2, #8]
 589:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 590:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
 591:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 592:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with external trigger */
 593:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 594:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 595:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 596:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 597:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 598:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 599:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 600:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 601:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 602:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 603:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 604:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 800              		.loc 1 604 0
 801 00a4 1846     		mov	r0, r3
 802              	.LVL50:
 588:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 803              		.loc 1 588 0
 804 00a6 10BD     		pop	{r4, pc}
 805              	.LVL51:
 806              	.L71:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 26


 593:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 807              		.loc 1 593 0
 808 00a8 9168     		ldr	r1, [r2, #8]
 809 00aa 41F40041 		orr	r1, r1, #32768
 810 00ae 9160     		str	r1, [r2, #8]
 811              		.loc 1 604 0
 812 00b0 1846     		mov	r0, r3
 813              	.LVL52:
 814 00b2 10BD     		pop	{r4, pc}
 815              	.LVL53:
 816              	.L66:
 600:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 817              		.loc 1 600 0
 818 00b4 0022     		movs	r2, #0
 819 00b6 84F82420 		strb	r2, [r4, #36]
 820 00ba 10BD     		pop	{r4, pc}
 821              	.LVL54:
 822              	.L73:
 823              	.LCFI12:
 824              		.cfi_def_cfa_offset 0
 825              		.cfi_restore 4
 826              		.cfi_restore 14
 528:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 827              		.loc 1 528 0
 828 00bc 0220     		movs	r0, #2
 829              	.LVL55:
 605:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 830              		.loc 1 605 0
 831 00be 7047     		bx	lr
 832              	.LVL56:
 833              	.L74:
 834              	.LCFI13:
 835              		.cfi_def_cfa_offset 8
 836              		.cfi_offset 4, -8
 837              		.cfi_offset 14, -4
 604:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 838              		.loc 1 604 0
 839 00c0 1846     		mov	r0, r3
 840              	.LVL57:
 841              		.loc 1 605 0
 842 00c2 10BD     		pop	{r4, pc}
 843              	.LVL58:
 844              	.L77:
 845              		.align	2
 846              	.L76:
 847 00c4 00280140 		.word	1073817600
 848              		.cfi_endproc
 849              	.LFE68:
 851              		.section	.text.HAL_ADCEx_InjectedStop_IT,"ax",%progbits
 852              		.align	2
 853              		.global	HAL_ADCEx_InjectedStop_IT
 854              		.thumb
 855              		.thumb_func
 857              	HAL_ADCEx_InjectedStop_IT:
 858              	.LFB69:
 606:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 607:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 27


 608:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels, disable interruption of 
 609:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         end-of-conversion. Disable ADC peripheral if no regular conversion
 610:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         is on going.
 611:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
 612:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 613:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 614:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 615:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 616:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 617:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 618:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 619:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
 620:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 859              		.loc 1 620 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863              	.LVL59:
 621:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 622:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 623:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 624:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 625:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 626:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 627:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 864              		.loc 1 627 0
 865 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 866 0004 012B     		cmp	r3, #1
 867 0006 29D0     		beq	.L82
 620:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 868              		.loc 1 620 0 discriminator 2
 869 0008 10B5     		push	{r4, lr}
 870              	.LCFI14:
 871              		.cfi_def_cfa_offset 8
 872              		.cfi_offset 4, -8
 873              		.cfi_offset 14, -4
 874 000a 0446     		mov	r4, r0
 875              		.loc 1 627 0 discriminator 2
 876 000c 0123     		movs	r3, #1
 877 000e 80F82430 		strb	r3, [r0, #36]
 628:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 629:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
 630:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
 631:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
 632:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
 633:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   are common)                                                            */
 634:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
 635:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 878              		.loc 1 635 0 discriminator 2
 879 0012 836A     		ldr	r3, [r0, #40]
 880 0014 13F4807F 		tst	r3, #256
 881 0018 16D1     		bne	.L80
 636:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 882              		.loc 1 636 0 discriminator 1
 883 001a 0368     		ldr	r3, [r0]
 884 001c 5B68     		ldr	r3, [r3, #4]
 635:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 28


 885              		.loc 1 635 0 discriminator 1
 886 001e 13F4806F 		tst	r3, #1024
 887 0022 11D1     		bne	.L80
 637:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 638:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
 639:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
 640:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 888              		.loc 1 640 0
 889 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 890              	.LVL60:
 641:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 642:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 643:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 891              		.loc 1 643 0
 892 0028 0346     		mov	r3, r0
 893 002a 90B9     		cbnz	r0, .L81
 644:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 645:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Disable ADC end of conversion interrupt for injected channels */
 646:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 894              		.loc 1 646 0
 895 002c 2168     		ldr	r1, [r4]
 896 002e 4A68     		ldr	r2, [r1, #4]
 897 0030 22F08002 		bic	r2, r2, #128
 898 0034 4A60     		str	r2, [r1, #4]
 647:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 648:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set ADC state */
 649:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 899              		.loc 1 649 0
 900 0036 A26A     		ldr	r2, [r4, #40]
 901 0038 22F48852 		bic	r2, r2, #4352
 902 003c 22F00102 		bic	r2, r2, #1
 903 0040 42F00102 		orr	r2, r2, #1
 904 0044 A262     		str	r2, [r4, #40]
 905 0046 04E0     		b	.L81
 906              	.LVL61:
 907              	.L80:
 650:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 651:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 652:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 653:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 654:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 655:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 656:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 657:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 908              		.loc 1 657 0
 909 0048 A36A     		ldr	r3, [r4, #40]
 910 004a 43F02003 		orr	r3, r3, #32
 911 004e A362     		str	r3, [r4, #40]
 912              	.LVL62:
 658:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 659:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 913              		.loc 1 659 0
 914 0050 0123     		movs	r3, #1
 915              	.LVL63:
 916              	.L81:
 660:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 661:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 29


 662:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 663:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 917              		.loc 1 663 0
 918 0052 0022     		movs	r2, #0
 919 0054 84F82420 		strb	r2, [r4, #36]
 664:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 665:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 666:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 920              		.loc 1 666 0
 921 0058 1846     		mov	r0, r3
 922 005a 10BD     		pop	{r4, pc}
 923              	.LVL64:
 924              	.L82:
 925              	.LCFI15:
 926              		.cfi_def_cfa_offset 0
 927              		.cfi_restore 4
 928              		.cfi_restore 14
 627:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 929              		.loc 1 627 0
 930 005c 0220     		movs	r0, #2
 931              	.LVL65:
 932 005e 7047     		bx	lr
 933              		.cfi_endproc
 934              	.LFE69:
 936              		.section	.text.HAL_ADCEx_MultiModeStart_DMA,"ax",%progbits
 937              		.align	2
 938              		.global	HAL_ADCEx_MultiModeStart_DMA
 939              		.thumb
 940              		.thumb_func
 942              	HAL_ADCEx_MultiModeStart_DMA:
 943              	.LFB70:
 667:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 668:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 669:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F101xG) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC
 670:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 671:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
 672:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         through DMA.
 673:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Multimode must have been previously configured using 
 674:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADCEx_MultiModeConfigChannel() function.
 675:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
 676:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - DMA transfer complete
 677:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - DMA half transfer
 678:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
 679:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note:  On STM32F1 devices, ADC slave regular group must be configured 
 680:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         with conversion trigger ADC_SOFTWARE_START.
 681:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note:  ADC slave can be enabled preliminarily using single-mode  
 682:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADC_Start() function.
 683:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 684:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  pData: The destination Buffer address.
 685:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
 686:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 687:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 688:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t L
 689:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 944              		.loc 1 689 0
 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 48
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 30


 947              		@ frame_needed = 0, uses_anonymous_args = 0
 948              	.LVL66:
 949 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 950              	.LCFI16:
 951              		.cfi_def_cfa_offset 20
 952              		.cfi_offset 4, -20
 953              		.cfi_offset 5, -16
 954              		.cfi_offset 6, -12
 955              		.cfi_offset 7, -8
 956              		.cfi_offset 14, -4
 957 0002 8DB0     		sub	sp, sp, #52
 958              	.LCFI17:
 959              		.cfi_def_cfa_offset 72
 960              	.LVL67:
 690:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 691:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 692:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 693:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 694:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 695:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 696:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 697:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 698:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 961              		.loc 1 698 0
 962 0004 90F82440 		ldrb	r4, [r0, #36]	@ zero_extendqisi2
 963 0008 012C     		cmp	r4, #1
 964 000a 66D0     		beq	.L92
 965              		.loc 1 698 0 is_stmt 0 discriminator 2
 966 000c 0124     		movs	r4, #1
 967 000e 80F82440 		strb	r4, [r0, #36]
 699:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 700:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Set a temporary handle of the ADC slave associated to the ADC master     */
 701:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 968              		.loc 1 701 0 is_stmt 1 discriminator 2
 969 0012 334C     		ldr	r4, .L94
 970 0014 0094     		str	r4, [sp]
 702:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 703:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* On STM32F1 devices, ADC slave regular group must be configured with      */
 704:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion trigger ADC_SOFTWARE_START.                                   */
 705:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: External trigger of ADC slave must be enabled, it is already done  */
 706:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*       into function "HAL_ADC_Init()".                                    */
 707:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((tmphadcSlave.Instance == NULL)                 ||
 708:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (! ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  )
 971              		.loc 1 708 0 discriminator 2
 972 0016 A468     		ldr	r4, [r4, #8]
 973 0018 04F46024 		and	r4, r4, #917504
 707:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (! ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  )
 974              		.loc 1 707 0 discriminator 2
 975 001c B4F5602F 		cmp	r4, #917504
 976 0020 08D0     		beq	.L87
 709:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 710:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 711:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 977              		.loc 1 711 0
 978 0022 836A     		ldr	r3, [r0, #40]
 979 0024 43F02003 		orr	r3, r3, #32
 980 0028 8362     		str	r3, [r0, #40]
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 31


 712:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 713:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 714:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 981              		.loc 1 714 0
 982 002a 0023     		movs	r3, #0
 983 002c 80F82430 		strb	r3, [r0, #36]
 715:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 716:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     return HAL_ERROR;
 984              		.loc 1 716 0
 985 0030 0120     		movs	r0, #1
 986              	.LVL68:
 987 0032 53E0     		b	.L86
 988              	.LVL69:
 989              	.L87:
 990 0034 1646     		mov	r6, r2
 991 0036 0D46     		mov	r5, r1
 992 0038 0746     		mov	r7, r0
 717:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 718:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 719:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripherals: master and slave (in case if not already     */
 720:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* enabled previously)                                                      */
 721:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 993              		.loc 1 721 0
 994 003a FFF7FEFF 		bl	ADC_Enable
 995              	.LVL70:
 722:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 996              		.loc 1 722 0
 997 003e 0446     		mov	r4, r0
 998 0040 18B9     		cbnz	r0, .L88
 723:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 724:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(&tmphadcSlave);
 999              		.loc 1 724 0
 1000 0042 6846     		mov	r0, sp
 1001              	.LVL71:
 1002 0044 FFF7FEFF 		bl	ADC_Enable
 1003              	.LVL72:
 1004 0048 0446     		mov	r4, r0
 1005              	.LVL73:
 1006              	.L88:
 725:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 726:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 727:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if all ADCs of multimode are effectively enabled */
 728:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1007              		.loc 1 728 0
 1008 004a 002C     		cmp	r4, #0
 1009 004c 40D1     		bne	.L89
 729:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 730:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state (ADC master)                                             */
 731:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to regular group conversion results     */
 732:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to regular operation                      */
 733:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 1010              		.loc 1 733 0
 1011 004e BA6A     		ldr	r2, [r7, #40]
 1012 0050 244B     		ldr	r3, .L94+4
 1013 0052 1340     		ands	r3, r3, r2
 1014 0054 43F48073 		orr	r3, r3, #256
 1015 0058 BB62     		str	r3, [r7, #40]
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 32


 734:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
 735:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY);
 736:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 737:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If conversions on group regular are also triggering group injected,    */
 738:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* update ADC state.                                                      */
 739:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1016              		.loc 1 739 0
 1017 005a 3B68     		ldr	r3, [r7]
 1018 005c 5B68     		ldr	r3, [r3, #4]
 1019 005e 13F4806F 		tst	r3, #1024
 1020 0062 05D0     		beq	.L90
 740:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 741:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1021              		.loc 1 741 0
 1022 0064 BB6A     		ldr	r3, [r7, #40]
 1023 0066 23F44053 		bic	r3, r3, #12288
 1024 006a 43F48053 		orr	r3, r3, #4096
 1025 006e BB62     		str	r3, [r7, #40]
 1026              	.L90:
 742:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 743:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 744:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 745:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 746:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 747:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 1027              		.loc 1 747 0
 1028 0070 0023     		movs	r3, #0
 1029 0072 87F82430 		strb	r3, [r7, #36]
 748:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 749:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC error code to none */
 750:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
 1030              		.loc 1 750 0
 1031 0076 FB62     		str	r3, [r7, #44]
 751:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 752:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 753:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA transfer complete callback */
 754:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1032              		.loc 1 754 0
 1033 0078 3B6A     		ldr	r3, [r7, #32]
 1034 007a 1B4A     		ldr	r2, .L94+8
 1035 007c 9A62     		str	r2, [r3, #40]
 755:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****        
 756:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA half transfer complete callback */
 757:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1036              		.loc 1 757 0
 1037 007e 3B6A     		ldr	r3, [r7, #32]
 1038 0080 1A4A     		ldr	r2, .L94+12
 1039 0082 DA62     		str	r2, [r3, #44]
 758:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 759:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA error callback */
 760:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 1040              		.loc 1 760 0
 1041 0084 3B6A     		ldr	r3, [r7, #32]
 1042 0086 1A4A     		ldr	r2, .L94+16
 1043 0088 1A63     		str	r2, [r3, #48]
 761:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 762:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 33


 763:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
 764:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* start (in case of SW start):                                           */
 765:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 766:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Clear regular group conversion flag and overrun flag */
 767:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 768:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1044              		.loc 1 768 0
 1045 008a 3B68     		ldr	r3, [r7]
 1046 008c 6FF00202 		mvn	r2, #2
 1047 0090 1A60     		str	r2, [r3]
 769:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 770:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Enable ADC DMA mode of ADC master */
 771:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1048              		.loc 1 771 0
 1049 0092 3A68     		ldr	r2, [r7]
 1050 0094 9368     		ldr	r3, [r2, #8]
 1051 0096 43F48073 		orr	r3, r3, #256
 1052 009a 9360     		str	r3, [r2, #8]
 772:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 773:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Start the DMA channel */
 774:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1053              		.loc 1 774 0
 1054 009c 3968     		ldr	r1, [r7]
 1055 009e 3346     		mov	r3, r6
 1056 00a0 2A46     		mov	r2, r5
 1057 00a2 4C31     		adds	r1, r1, #76
 1058 00a4 386A     		ldr	r0, [r7, #32]
 1059 00a6 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1060              	.LVL74:
 775:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 776:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Start conversion of regular group if software start has been selected. */
 777:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 778:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 779:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
 780:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
 781:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 1061              		.loc 1 781 0
 1062 00aa 3B68     		ldr	r3, [r7]
 1063 00ac 9A68     		ldr	r2, [r3, #8]
 1064 00ae 02F46022 		and	r2, r2, #917504
 1065 00b2 B2F5602F 		cmp	r2, #917504
 1066 00b6 05D1     		bne	.L91
 782:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 783:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with SW start */
 784:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1067              		.loc 1 784 0
 1068 00b8 9A68     		ldr	r2, [r3, #8]
 1069 00ba 42F4A002 		orr	r2, r2, #5242880
 1070 00be 9A60     		str	r2, [r3, #8]
 785:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 786:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 787:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 788:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with external trigger */
 789:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 790:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 791:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 792:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 34


 793:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 794:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 795:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 796:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 797:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 798:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 799:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1071              		.loc 1 799 0
 1072 00c0 2046     		mov	r0, r4
 1073 00c2 0BE0     		b	.L86
 1074              	.L91:
 789:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 1075              		.loc 1 789 0
 1076 00c4 9A68     		ldr	r2, [r3, #8]
 1077 00c6 42F48012 		orr	r2, r2, #1048576
 1078 00ca 9A60     		str	r2, [r3, #8]
 1079              		.loc 1 799 0
 1080 00cc 2046     		mov	r0, r4
 1081 00ce 05E0     		b	.L86
 1082              	.L89:
 795:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 1083              		.loc 1 795 0
 1084 00d0 0023     		movs	r3, #0
 1085 00d2 87F82430 		strb	r3, [r7, #36]
 1086              		.loc 1 799 0
 1087 00d6 2046     		mov	r0, r4
 1088 00d8 00E0     		b	.L86
 1089              	.LVL75:
 1090              	.L92:
 698:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 1091              		.loc 1 698 0
 1092 00da 0220     		movs	r0, #2
 1093              	.LVL76:
 1094              	.L86:
 800:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1095              		.loc 1 800 0
 1096 00dc 0DB0     		add	sp, sp, #52
 1097              	.LCFI18:
 1098              		.cfi_def_cfa_offset 20
 1099              		@ sp needed
 1100 00de F0BD     		pop	{r4, r5, r6, r7, pc}
 1101              	.L95:
 1102              		.align	2
 1103              	.L94:
 1104 00e0 00280140 		.word	1073817600
 1105 00e4 FEFCEFFF 		.word	-1049346
 1106 00e8 00000000 		.word	ADC_DMAConvCplt
 1107 00ec 00000000 		.word	ADC_DMAHalfConvCplt
 1108 00f0 00000000 		.word	ADC_DMAError
 1109              		.cfi_endproc
 1110              	.LFE70:
 1112              		.section	.text.HAL_ADCEx_MultiModeStop_DMA,"ax",%progbits
 1113              		.align	2
 1114              		.global	HAL_ADCEx_MultiModeStop_DMA
 1115              		.thumb
 1116              		.thumb_func
 1118              	HAL_ADCEx_MultiModeStop_DMA:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 35


 1119              	.LFB71:
 801:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 802:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 803:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 804:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
 805:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         ADC peripheral.
 806:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. To disable multimode 
 807:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (set with HAL_ADCEx_MultiModeConfigChannel(), ADC must be 
 808:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_ReInit().
 809:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function 
 810:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADC_Stop_DMA must be called after this function with handle of
 811:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel.
 812:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 813:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 814:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 815:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
 816:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1120              		.loc 1 816 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 48
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124              	.LVL77:
 817:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 818:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 819:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 820:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 821:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 822:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 823:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 824:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1125              		.loc 1 824 0
 1126 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1127 0004 012B     		cmp	r3, #1
 1128 0006 3AD0     		beq	.L101
 816:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1129              		.loc 1 816 0 discriminator 2
 1130 0008 10B5     		push	{r4, lr}
 1131              	.LCFI19:
 1132              		.cfi_def_cfa_offset 8
 1133              		.cfi_offset 4, -8
 1134              		.cfi_offset 14, -4
 1135 000a 8CB0     		sub	sp, sp, #48
 1136              	.LCFI20:
 1137              		.cfi_def_cfa_offset 56
 1138 000c 0446     		mov	r4, r0
 1139              		.loc 1 824 0 discriminator 2
 1140 000e 0123     		movs	r3, #1
 1141 0010 80F82430 		strb	r3, [r0, #36]
 825:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 826:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  
 827:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups */
 828:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Disable ADC master peripheral */
 829:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1142              		.loc 1 829 0 discriminator 2
 1143 0014 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1144              	.LVL78:
 830:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 36


 831:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 832:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1145              		.loc 1 832 0 discriminator 2
 1146 0018 0346     		mov	r3, r0
 1147 001a 58BB     		cbnz	r0, .L98
 833:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 834:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
 835:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 1148              		.loc 1 835 0
 1149 001c 0CA8     		add	r0, sp, #48
 1150              	.LVL79:
 1151 001e 1A4B     		ldr	r3, .L104
 1152 0020 40F8303D 		str	r3, [r0, #-48]!
 836:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 837:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 838:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 839:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
 840:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 841:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 842:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Process unlocked */
 843:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 844:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 845:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       return HAL_ERROR;
 846:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 847:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 848:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 849:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Disable ADC slave peripheral */
 850:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = ADC_ConversionStop_Disable(&tmphadcSlave);
 1153              		.loc 1 850 0
 1154 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1155              	.LVL80:
 851:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 852:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
 853:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (tmp_hal_status != HAL_OK)
 1156              		.loc 1 853 0
 1157 0028 40B1     		cbz	r0, .L99
 854:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 855:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 856:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 1158              		.loc 1 856 0
 1159 002a A36A     		ldr	r3, [r4, #40]
 1160 002c 43F01003 		orr	r3, r3, #16
 1161 0030 A362     		str	r3, [r4, #40]
 857:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 858:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 859:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 1162              		.loc 1 859 0
 1163 0032 0023     		movs	r3, #0
 1164 0034 84F82430 		strb	r3, [r4, #36]
 860:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 861:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 1165              		.loc 1 861 0
 1166 0038 0120     		movs	r0, #1
 1167              	.LVL81:
 1168 003a 22E0     		b	.L97
 1169              	.LVL82:
 1170              	.L99:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 37


 862:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 863:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 864:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 865:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC DMA mode */
 866:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1171              		.loc 1 866 0
 1172 003c 2268     		ldr	r2, [r4]
 1173 003e 9368     		ldr	r3, [r2, #8]
 1174 0040 23F48073 		bic	r3, r3, #256
 1175 0044 9360     		str	r3, [r2, #8]
 867:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 868:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Reset configuration of ADC DMA continuous request for dual mode */
 869:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR1, ADC_CR1_DUALMOD);
 1176              		.loc 1 869 0
 1177 0046 2268     		ldr	r2, [r4]
 1178 0048 5368     		ldr	r3, [r2, #4]
 1179 004a 23F47023 		bic	r3, r3, #983040
 1180 004e 5360     		str	r3, [r2, #4]
 870:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 871:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
 872:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
 873:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 1181              		.loc 1 873 0
 1182 0050 206A     		ldr	r0, [r4, #32]
 1183              	.LVL83:
 1184 0052 FFF7FEFF 		bl	HAL_DMA_Abort
 1185              	.LVL84:
 874:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 875:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 876:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
 877:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1186              		.loc 1 877 0
 1187 0056 0346     		mov	r3, r0
 1188 0058 40B9     		cbnz	r0, .L100
 878:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 879:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Change ADC state (ADC master) */
 880:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 1189              		.loc 1 880 0
 1190 005a A26A     		ldr	r2, [r4, #40]
 1191 005c 22F48852 		bic	r2, r2, #4352
 1192 0060 22F00102 		bic	r2, r2, #1
 1193 0064 42F00102 		orr	r2, r2, #1
 1194 0068 A262     		str	r2, [r4, #40]
 1195 006a 03E0     		b	.L98
 1196              	.L100:
 881:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 882:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 883:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 884:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 885:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 886:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
 887:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);    
 1197              		.loc 1 887 0
 1198 006c A26A     		ldr	r2, [r4, #40]
 1199 006e 42F04002 		orr	r2, r2, #64
 1200 0072 A262     		str	r2, [r4, #40]
 1201              	.L98:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 38


 1202              	.LVL85:
 888:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 889:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 890:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 891:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 892:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1203              		.loc 1 892 0
 1204 0074 0022     		movs	r2, #0
 1205 0076 84F82420 		strb	r2, [r4, #36]
 893:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 894:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 895:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1206              		.loc 1 895 0
 1207 007a 1846     		mov	r0, r3
 1208 007c 01E0     		b	.L97
 1209              	.LVL86:
 1210              	.L101:
 1211              	.LCFI21:
 1212              		.cfi_def_cfa_offset 0
 1213              		.cfi_restore 4
 1214              		.cfi_restore 14
 824:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 1215              		.loc 1 824 0
 1216 007e 0220     		movs	r0, #2
 1217              	.LVL87:
 1218 0080 7047     		bx	lr
 1219              	.LVL88:
 1220              	.L97:
 1221              	.LCFI22:
 1222              		.cfi_def_cfa_offset 56
 1223              		.cfi_offset 4, -8
 1224              		.cfi_offset 14, -4
 896:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1225              		.loc 1 896 0
 1226 0082 0CB0     		add	sp, sp, #48
 1227              	.LCFI23:
 1228              		.cfi_def_cfa_offset 8
 1229              		@ sp needed
 1230 0084 10BD     		pop	{r4, pc}
 1231              	.LVL89:
 1232              	.L105:
 1233 0086 00BF     		.align	2
 1234              	.L104:
 1235 0088 00280140 		.word	1073817600
 1236              		.cfi_endproc
 1237              	.LFE71:
 1239              		.section	.text.HAL_ADCEx_InjectedGetValue,"ax",%progbits
 1240              		.align	2
 1241              		.global	HAL_ADCEx_InjectedGetValue
 1242              		.thumb
 1243              		.thumb_func
 1245              	HAL_ADCEx_InjectedGetValue:
 1246              	.LFB72:
 897:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #endif /* STM32F101xG || defined STM32F103x6 || defined STM32F103xB || defined STM32F105xC || defin
 898:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 899:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 900:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Get ADC injected group conversion result.
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 39


 901:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Reading register JDRx automatically clears ADC flag JEOC
 902:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (ADC group injected end of unitary conversion).
 903:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag JEOS 
 904:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (ADC group injected end of sequence conversion)
 905:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Occurrence of flag JEOS rising:
 906:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag JEOS is equivalent
 907:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            to flag JEOC.
 908:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
 909:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            sequence flag JEOC only is raised, at the end of the scan sequence
 910:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            both flags JEOC and EOS are raised.
 911:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Flag JEOS must not be cleared by this function because
 912:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         it would not be compliant with low power features
 913:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (feature low power auto-wait, not available on all STM32 families).
 914:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         To clear this flag, either use function: 
 915:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
 916:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADCEx_InjectedPollForConversion() 
 917:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_JEOS).
 918:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 919:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  InjectedRank: the converted ADC injected rank.
 920:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
 921:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_1: Injected Channel1 selected
 922:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_2: Injected Channel2 selected
 923:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
 924:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
 925:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval ADC group injected conversion data
 926:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 927:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
 928:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1247              		.loc 1 928 0
 1248              		.cfi_startproc
 1249              		@ args = 0, pretend = 0, frame = 0
 1250              		@ frame_needed = 0, uses_anonymous_args = 0
 1251              		@ link register save eliminated.
 1252              	.LVL90:
 929:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tmp_jdr = 0;
 930:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 931:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 932:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 933:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
 934:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 935:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Get ADC converted value */ 
 936:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   switch(InjectedRank)
 1253              		.loc 1 936 0
 1254 0000 0329     		cmp	r1, #3
 1255 0002 07D0     		beq	.L108
 1256 0004 0429     		cmp	r1, #4
 1257 0006 02D0     		beq	.L109
 1258 0008 0229     		cmp	r1, #2
 1259 000a 09D1     		bne	.L112
 1260 000c 05E0     		b	.L110
 1261              	.L109:
 937:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {  
 938:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_4: 
 939:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
 1262              		.loc 1 939 0
 1263 000e 0368     		ldr	r3, [r0]
 1264 0010 986C     		ldr	r0, [r3, #72]
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 40


 1265              	.LVL91:
 940:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1266              		.loc 1 940 0
 1267 0012 7047     		bx	lr
 1268              	.LVL92:
 1269              	.L108:
 941:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3: 
 942:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
 1270              		.loc 1 942 0
 1271 0014 0368     		ldr	r3, [r0]
 1272 0016 586C     		ldr	r0, [r3, #68]
 1273              	.LVL93:
 943:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1274              		.loc 1 943 0
 1275 0018 7047     		bx	lr
 1276              	.LVL94:
 1277              	.L110:
 944:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2: 
 945:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR2;
 1278              		.loc 1 945 0
 1279 001a 0368     		ldr	r3, [r0]
 1280 001c 186C     		ldr	r0, [r3, #64]
 1281              	.LVL95:
 946:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1282              		.loc 1 946 0
 1283 001e 7047     		bx	lr
 1284              	.LVL96:
 1285              	.L112:
 947:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
 948:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     default:
 949:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR1;
 1286              		.loc 1 949 0
 1287 0020 0368     		ldr	r3, [r0]
 1288 0022 D86B     		ldr	r0, [r3, #60]
 1289              	.LVL97:
 950:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 951:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 952:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 953:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
 954:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_jdr;
 955:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1290              		.loc 1 955 0
 1291 0024 7047     		bx	lr
 1292              		.cfi_endproc
 1293              	.LFE72:
 1295 0026 00BF     		.section	.text.HAL_ADCEx_MultiModeGetValue,"ax",%progbits
 1296              		.align	2
 1297              		.global	HAL_ADCEx_MultiModeGetValue
 1298              		.thumb
 1299              		.thumb_func
 1301              	HAL_ADCEx_MultiModeGetValue:
 1302              	.LFB73:
 956:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 957:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F101xG) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC
 958:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 959:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Returns the last ADC Master&Slave regular conversions results data
 960:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         in the selected multi mode.
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 41


 961:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 962:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval The converted data value.
 963:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 964:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef* hadc)
 965:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1303              		.loc 1 965 0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 0
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 1307              		@ link register save eliminated.
 1308              	.LVL98:
 966:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tmpDR = 0;
 967:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 968:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 969:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 970:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 971:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 972:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 973:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 974:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
 975:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*       cleared by hardware when reading register DR.                      */
 976:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 977:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* On STM32F1 devices, ADC1 data register DR contains ADC2 conversions      */
 978:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* only if ADC1 DMA mode is enabled.                                        */
 979:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmpDR = hadc->Instance->DR;
 1309              		.loc 1 979 0
 1310 0000 0368     		ldr	r3, [r0]
 1311 0002 D86C     		ldr	r0, [r3, #76]
 1312              	.LVL99:
 980:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 981:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(ADC1->CR2, ADC_CR2_DMA))
 1313              		.loc 1 981 0
 1314 0004 044B     		ldr	r3, .L115
 1315 0006 9B68     		ldr	r3, [r3, #8]
 1316 0008 13F4807F 		tst	r3, #256
 1317 000c 03D1     		bne	.L114
 982:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 983:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmpDR |= (ADC2->DR << 16);
 1318              		.loc 1 983 0
 1319 000e 034B     		ldr	r3, .L115+4
 1320 0010 DB6C     		ldr	r3, [r3, #76]
 1321 0012 40EA0340 		orr	r0, r0, r3, lsl #16
 1322              	.LVL100:
 1323              	.L114:
 984:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 985:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 986:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
 987:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmpDR;
 988:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1324              		.loc 1 988 0
 1325 0016 7047     		bx	lr
 1326              	.L116:
 1327              		.align	2
 1328              	.L115:
 1329 0018 00240140 		.word	1073816576
 1330 001c 00280140 		.word	1073817600
 1331              		.cfi_endproc
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 42


 1332              	.LFE73:
 1334              		.section	.text.HAL_ADCEx_InjectedConvCpltCallback,"ax",%progbits
 1335              		.align	2
 1336              		.weak	HAL_ADCEx_InjectedConvCpltCallback
 1337              		.thumb
 1338              		.thumb_func
 1340              	HAL_ADCEx_InjectedConvCpltCallback:
 1341              	.LFB74:
 989:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #endif /* STM32F101xG || defined STM32F103x6 || defined STM32F103xB || defined STM32F105xC || defin
 990:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 991:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 992:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Injected conversion complete callback in non blocking mode 
 993:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 994:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 995:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 996:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
 997:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1342              		.loc 1 997 0
 1343              		.cfi_startproc
 1344              		@ args = 0, pretend = 0, frame = 0
 1345              		@ frame_needed = 0, uses_anonymous_args = 0
 1346              		@ link register save eliminated.
 1347              	.LVL101:
 1348 0000 7047     		bx	lr
 1349              		.cfi_endproc
 1350              	.LFE74:
 1352 0002 00BF     		.section	.text.HAL_ADCEx_InjectedConfigChannel,"ax",%progbits
 1353              		.align	2
 1354              		.global	HAL_ADCEx_InjectedConfigChannel
 1355              		.thumb
 1356              		.thumb_func
 1358              	HAL_ADCEx_InjectedConfigChannel:
 1359              	.LFB75:
 998:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
 999:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   UNUSED(hadc);
1000:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1001:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****             the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
1002:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1003:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
1004:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1005:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
1006:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @}
1007:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1008:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1009:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group2 Extended Peripheral Control functions
1010:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief    Extended Peripheral Control functions
1011:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
1012:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @verbatim   
1013:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
1014:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****              ##### Peripheral Control functions #####
1015:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================  
1016:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
1017:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Configure channels on injected group
1018:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Configure multimode
1019:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1020:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @endverbatim
1021:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 43


1022:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1023:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1024:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
1025:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Configures the ADC injected group and the selected channel to be
1026:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         linked to the injected group.
1027:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
1028:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         This function initializes injected group, following calls to this 
1029:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function can be used to reconfigure some parameters of structure
1030:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         "ADC_InjectionConfTypeDef" on the fly, without reseting the ADC.
1031:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state: 
1032:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         this function must be called when ADC is not under conversion.
1033:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1034:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
1035:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         injected group.
1036:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
1037:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1038:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef
1039:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1360              		.loc 1 1039 0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 8
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
 1364              	.LVL102:
 1365              		.loc 1 1039 0
 1366 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1367              	.LCFI24:
 1368              		.cfi_def_cfa_offset 20
 1369              		.cfi_offset 4, -20
 1370              		.cfi_offset 5, -16
 1371              		.cfi_offset 6, -12
 1372              		.cfi_offset 7, -8
 1373              		.cfi_offset 14, -4
 1374 0002 83B0     		sub	sp, sp, #12
 1375              	.LCFI25:
 1376              		.cfi_def_cfa_offset 32
 1377              	.LVL103:
1040:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1041:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 1378              		.loc 1 1041 0
 1379 0004 0023     		movs	r3, #0
 1380 0006 0193     		str	r3, [sp, #4]
1042:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1043:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
1044:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1045:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
1046:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
1047:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
1048:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
1049:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(sConfigInjected->InjectedOffset));
1050:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1051:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
1052:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1053:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
1054:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
1055:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
1056:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1057:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 44


1058:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
1059:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1381              		.loc 1 1059 0
 1382 0008 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1383 000c 012B     		cmp	r3, #1
 1384 000e 00F03381 		beq	.L141
 1385              		.loc 1 1059 0 is_stmt 0 discriminator 2
 1386 0012 0123     		movs	r3, #1
 1387 0014 80F82430 		strb	r3, [r0, #36]
1060:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1061:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group sequencer:                               */
1062:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - if scan mode is disabled, injected channels sequence length is set to  */
1063:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   0x00: 1 channel converted (channel on regular rank 1)                  */
1064:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   Parameter "InjectedNbrOfConversion" is discarded.                      */
1065:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   Note: Scan mode is present by hardware on this device and, if          */
1066:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
1067:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
1068:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - if scan mode is enabled, injected channels sequence length is set to   */
1069:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   parameter "InjectedNbrOfConversion".                                   */
1070:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 1388              		.loc 1 1070 0 is_stmt 1 discriminator 2
 1389 0018 8368     		ldr	r3, [r0, #8]
 1390 001a DBB9     		cbnz	r3, .L120
1071:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1072:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 1391              		.loc 1 1072 0
 1392 001c 4B68     		ldr	r3, [r1, #4]
 1393 001e 012B     		cmp	r3, #1
 1394 0020 12D1     		bne	.L121
1073:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1074:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for all injected ranks */
1075:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                             ,
 1395              		.loc 1 1075 0
 1396 0022 0568     		ldr	r5, [r0]
 1397 0024 AB6B     		ldr	r3, [r5, #56]
 1398 0026 9C0D     		lsrs	r4, r3, #22
 1399 0028 A405     		lsls	r4, r4, #22
 1400 002a 0A68     		ldr	r2, [r1]
 1401              	.LVL104:
 1402              	.LBB20:
 1403              	.LBB21:
 1404              		.file 2 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
   9:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 45


  16:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    *
  21:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  35:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  38:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif
  45:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  46:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  47:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   @{
  51:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
  52:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  53:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
  54:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
  58:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
  60:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
  62:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  63:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  64:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
  65:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
  69:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
  71:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 46


  73:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  74:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  75:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
  76:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
  80:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
  82:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  84:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
  87:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  88:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  89:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
  96:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
  98:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
  99:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 100:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 105:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 107:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 109:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 112:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 113:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 114:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 115:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 119:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 121:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 123:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 126:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 127:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 128:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 129:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 47


 130:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 132:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 134:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 136:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 138:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 141:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 142:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 143:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 144:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 148:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 150:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 152:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 155:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 156:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 157:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 158:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 162:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 164:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 166:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 167:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 168:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 173:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 175:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 180:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 181:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 182:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 186:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 48


 187:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 188:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 190:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 192:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 193:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 194:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 195:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 199:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 201:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 203:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 206:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 207:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 208:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 209:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 213:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 215:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 217:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 218:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 219:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 221:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 222:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 226:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 228:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 230:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 231:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 232:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 233:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 237:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 239:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 241:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 242:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 243:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 49


 244:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 248:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 250:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 252:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 255:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 256:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 257:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 258:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 262:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 264:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 266:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 267:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 268:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 269:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 274:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 276:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 278:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 279:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 280:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 285:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 287:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 289:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 292:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 293:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 294:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 295:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 299:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 50


 301:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 303:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 306:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 307:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 309:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 310:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 314:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 316:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 319:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #else
 325:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif
 327:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 328:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 329:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 330:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 331:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 335:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 337:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif
 343:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 344:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 345:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 347:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 348:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 349:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 351:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 352:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   @{
 356:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** */
 357:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 51


 358:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #else
 365:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif
 368:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 369:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 370:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 375:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 377:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 378:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 379:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 380:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 383:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 385:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 387:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 388:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 389:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 390:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 394:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 396:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 398:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 399:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 400:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 401:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 404:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 406:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 408:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 409:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 410:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 411:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 52


 415:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 416:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 418:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 420:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 421:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 422:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 423:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 427:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 429:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 431:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 432:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 433:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 434:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 438:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 440:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 442:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 443:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 444:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 445:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 450:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 452:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #else
 455:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 457:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif
 460:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 461:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 462:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 463:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 464:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 469:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 471:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 53


 472:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 473:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 476:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 477:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 478:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 479:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 484:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 486:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #else
 489:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 491:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #endif
 494:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 495:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 496:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 497:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 498:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 504:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 506:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** }
 508:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 509:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 510:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 511:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 517:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 519:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 520:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** /**
 521:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****  */
 526:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** {
 528:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 54


 529:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** 
 530:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1405              		.loc 2 531 0
 1406 002c 4FF47873 		mov	r3, #992
 1407              		.syntax unified
 1408              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 1409 0030 93FAA3F3 		rbit r3, r3
 1410              	@ 0 "" 2
 1411              	.LVL105:
 1412              		.thumb
 1413              		.syntax unified
 1414              	.LBE21:
 1415              	.LBE20:
 1416              		.loc 1 1075 0
 1417 0034 B3FA83F3 		clz	r3, r3
 1418 0038 03EB4303 		add	r3, r3, r3, lsl #1
 1419 003c 02FA03F3 		lsl	r3, r2, r3
 1420 0040 2343     		orrs	r3, r3, r4
 1421 0042 AB63     		str	r3, [r5, #56]
1040:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 1422              		.loc 1 1040 0
 1423 0044 0022     		movs	r2, #0
 1424 0046 4AE0     		b	.L122
 1425              	.L121:
1076:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL   |
1077:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ4 |
1078:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ3 |
1079:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ2 |
1080:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ1                                    ,
1081:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,
1082:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   ADC_INJECTED_RANK_1,
1083:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   0x01)                            );
1084:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1085:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If another injected rank than rank1 was intended to be set, and could  */
1086:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* not due to ScanConvMode disabled, error is reported.                   */
1087:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
1088:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1089:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1090:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1426              		.loc 1 1090 0
 1427 0048 836A     		ldr	r3, [r0, #40]
 1428 004a 43F02003 		orr	r3, r3, #32
 1429 004e 8362     		str	r3, [r0, #40]
 1430              	.LVL106:
1091:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
1092:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 1431              		.loc 1 1092 0
 1432 0050 0122     		movs	r2, #1
 1433 0052 44E0     		b	.L122
 1434              	.LVL107:
 1435              	.L120:
1093:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1094:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1095:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
1096:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1097:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Since injected channels rank conv. order depends on total number of   */
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 55


1098:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* injected conversions, selected rank must be below or equal to total   */
1099:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* number of injected conversions to be updated.                         */
1100:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 1436              		.loc 1 1100 0
 1437 0054 4B68     		ldr	r3, [r1, #4]
 1438 0056 0C69     		ldr	r4, [r1, #16]
 1439 0058 A342     		cmp	r3, r4
 1440 005a 2BD8     		bhi	.L123
1101:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1102:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
1103:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set the SQx bits for the selected rank */
1104:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                         ,
 1441              		.loc 1 1104 0
 1442 005c 0768     		ldr	r7, [r0]
 1443 005e BD6B     		ldr	r5, [r7, #56]
 1444              	.LVL108:
 1445              	.LBB22:
 1446              	.LBB23:
 1447              		.loc 2 531 0
 1448 0060 4FF47876 		mov	r6, #992
 1449              		.syntax unified
 1450              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 1451 0064 96FAA6FE 		rbit lr, r6
 1452              	@ 0 "" 2
 1453              	.LVL109:
 1454              		.thumb
 1455              		.syntax unified
 1456              	.LBE23:
 1457              	.LBE22:
 1458              		.loc 1 1104 0
 1459 0068 BEFA8EFE 		clz	lr, lr
 1460 006c 1A1B     		subs	r2, r3, r4
 1461 006e 0332     		adds	r2, r2, #3
 1462 0070 02FB0EFE 		mul	lr, r2, lr
 1463 0074 1F23     		movs	r3, #31
 1464 0076 03FA0EF3 		lsl	r3, r3, lr
 1465 007a 43F44013 		orr	r3, r3, #3145728
 1466 007e 25EA030C 		bic	ip, r5, r3
 1467 0082 631E     		subs	r3, r4, #1
 1468              	.LVL110:
 1469              	.LBB24:
 1470              	.LBB25:
 1471              		.loc 2 531 0
 1472 0084 4FF4401E 		mov	lr, #3145728
 1473              		.syntax unified
 1474              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 1475 0088 9EFAAEFE 		rbit lr, lr
 1476              	@ 0 "" 2
 1477              	.LVL111:
 1478              		.thumb
 1479              		.syntax unified
 1480              	.LBE25:
 1481              	.LBE24:
 1482              		.loc 1 1104 0
 1483 008c BEFA8EFE 		clz	lr, lr
 1484 0090 03FA0EFE 		lsl	lr, r3, lr
 1485 0094 0D68     		ldr	r5, [r1]
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 56


 1486              	.LVL112:
 1487              	.LBB26:
 1488              	.LBB27:
 1489              		.loc 2 531 0
 1490              		.syntax unified
 1491              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 1492 0096 96FAA6F6 		rbit r6, r6
 1493              	@ 0 "" 2
 1494              	.LVL113:
 1495              		.thumb
 1496              		.syntax unified
 1497              	.LBE27:
 1498              	.LBE26:
 1499              		.loc 1 1104 0
 1500 009a B6FA86F6 		clz	r6, r6
 1501 009e 02FB06F2 		mul	r2, r2, r6
 1502 00a2 05FA02F2 		lsl	r2, r5, r2
 1503 00a6 4EEA0205 		orr	r5, lr, r2
 1504 00aa 4CEA0505 		orr	r5, ip, r5
 1505 00ae BD63     		str	r5, [r7, #56]
1040:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 1506              		.loc 1 1040 0
 1507 00b0 0022     		movs	r2, #0
 1508 00b2 14E0     		b	.L122
 1509              	.L123:
1105:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1106:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                               |
1107:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
1108:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1109:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion)   ,
1110:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1111:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL_SHIFT(sConfigInjected->InjectedNbrOfConversion) |
1112:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,      
1113:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1114:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion)    );
1115:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1116:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
1117:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1118:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
1119:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                       ,
 1510              		.loc 1 1119 0
 1511 00b4 0668     		ldr	r6, [r0]
 1512 00b6 B56B     		ldr	r5, [r6, #56]
 1513              	.LVL114:
 1514              	.LBB28:
 1515              	.LBB29:
 1516              		.loc 2 531 0
 1517 00b8 4FF47872 		mov	r2, #992
 1518              		.syntax unified
 1519              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 1520 00bc 92FAA2F2 		rbit r2, r2
 1521              	@ 0 "" 2
 1522              	.LVL115:
 1523              		.thumb
 1524              		.syntax unified
 1525              	.LBE29:
 1526              	.LBE28:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 57


 1527              		.loc 1 1119 0
 1528 00c0 B2FA82F2 		clz	r2, r2
 1529 00c4 1B1B     		subs	r3, r3, r4
 1530 00c6 0333     		adds	r3, r3, #3
 1531 00c8 03FB02F3 		mul	r3, r3, r2
 1532 00cc 1F22     		movs	r2, #31
 1533 00ce 02FA03F3 		lsl	r3, r2, r3
 1534 00d2 43F44013 		orr	r3, r3, #3145728
 1535 00d6 25EA0303 		bic	r3, r5, r3
 1536 00da B363     		str	r3, [r6, #56]
1040:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 1537              		.loc 1 1040 0
 1538 00dc 0022     		movs	r2, #0
 1539              	.LVL116:
 1540              	.L122:
1120:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1121:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                               |
1122:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
1123:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1124:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion) ,
1125:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1126:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  0x00000000                                                  );
1127:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1128:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   } 
1129:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1130:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
1131:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1132:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
1133:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - external trigger to start conversion                                  */
1134:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update not conditioned to ADC state:                          */
1135:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
1136:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
1137:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
1138:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
1139:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 1541              		.loc 1 1139 0
 1542 00de 0368     		ldr	r3, [r0]
 1543 00e0 9C68     		ldr	r4, [r3, #8]
 1544 00e2 14F0010F 		tst	r4, #1
 1545 00e6 07D1     		bne	.L124
1140:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {    
1141:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR2                                           ,
 1546              		.loc 1 1141 0
 1547 00e8 9C68     		ldr	r4, [r3, #8]
 1548 00ea 24F4E044 		bic	r4, r4, #28672
 1549 00ee 24F00104 		bic	r4, r4, #1
 1550 00f2 CD69     		ldr	r5, [r1, #28]
 1551 00f4 2C43     		orrs	r4, r4, r5
 1552 00f6 9C60     		str	r4, [r3, #8]
 1553              	.L124:
1142:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CR2_JEXTSEL |
1143:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CR2_ADON                                                  ,
1144:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CFGR_JEXTSEL(hadc, sConfigInjected->ExternalTrigInjecConv) );
1145:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1146:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1147:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1148:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 58


1149:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
1150:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
1151:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1152:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Automatic injected conversion can be enabled if injected group         */
1153:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* external triggers are disabled.                                        */
1154:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->AutoInjectedConv == ENABLE)
 1554              		.loc 1 1154 0
 1555 00f8 8B69     		ldr	r3, [r1, #24]
 1556 00fa 012B     		cmp	r3, #1
 1557 00fc 0ED1     		bne	.L125
1155:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1156:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 1558              		.loc 1 1156 0
 1559 00fe CB69     		ldr	r3, [r1, #28]
 1560 0100 B3F5E04F 		cmp	r3, #28672
 1561 0104 05D1     		bne	.L126
1157:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1158:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 1562              		.loc 1 1158 0
 1563 0106 0468     		ldr	r4, [r0]
 1564 0108 6368     		ldr	r3, [r4, #4]
 1565 010a 43F48063 		orr	r3, r3, #1024
 1566 010e 6360     		str	r3, [r4, #4]
 1567 0110 04E0     		b	.L125
 1568              	.L126:
1159:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1160:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
1161:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1162:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1163:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1569              		.loc 1 1163 0
 1570 0112 836A     		ldr	r3, [r0, #40]
 1571 0114 43F02003 		orr	r3, r3, #32
 1572 0118 8362     		str	r3, [r0, #40]
 1573              	.LVL117:
1164:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
1165:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 1574              		.loc 1 1165 0
 1575 011a 0122     		movs	r2, #1
 1576              	.LVL118:
 1577              	.L125:
1166:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1167:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1168:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1169:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Injected discontinuous can be enabled only if auto-injected mode is    */
1170:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* disabled.                                                              */  
1171:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 1578              		.loc 1 1171 0
 1579 011c 4B69     		ldr	r3, [r1, #20]
 1580 011e 012B     		cmp	r3, #1
 1581 0120 0CD1     		bne	.L127
1172:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1173:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == DISABLE)
 1582              		.loc 1 1173 0
 1583 0122 8B69     		ldr	r3, [r1, #24]
 1584 0124 2BB9     		cbnz	r3, .L128
1174:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 59


1175:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 1585              		.loc 1 1175 0
 1586 0126 0468     		ldr	r4, [r0]
 1587 0128 6368     		ldr	r3, [r4, #4]
 1588 012a 43F48053 		orr	r3, r3, #4096
 1589 012e 6360     		str	r3, [r4, #4]
 1590 0130 04E0     		b	.L127
 1591              	.L128:
1176:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       } 
1177:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
1178:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1179:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1180:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1592              		.loc 1 1180 0
 1593 0132 836A     		ldr	r3, [r0, #40]
 1594 0134 43F02003 		orr	r3, r3, #32
 1595 0138 8362     		str	r3, [r0, #40]
 1596              	.LVL119:
1181:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
1182:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 1597              		.loc 1 1182 0
 1598 013a 0122     		movs	r2, #1
 1599              	.LVL120:
 1600              	.L127:
1183:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1184:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1185:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1186:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1187:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* InjectedChannel sampling time configuration */
1188:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* For channels 10 to 17 */
1189:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 1601              		.loc 1 1189 0
 1602 013c 0B68     		ldr	r3, [r1]
 1603 013e 092B     		cmp	r3, #9
 1604 0140 1AD9     		bls	.L129
1190:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1191:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 1605              		.loc 1 1191 0
 1606 0142 0768     		ldr	r7, [r0]
 1607 0144 FD68     		ldr	r5, [r7, #12]
 1608              	.LVL121:
 1609              	.LBB30:
 1610              	.LBB31:
 1611              		.loc 2 531 0
 1612 0146 3824     		movs	r4, #56
 1613              		.syntax unified
 1614              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 1615 0148 94FAA4F6 		rbit r6, r4
 1616              	@ 0 "" 2
 1617              	.LVL122:
 1618              		.thumb
 1619              		.syntax unified
 1620              	.LBE31:
 1621              	.LBE30:
 1622              		.loc 1 1191 0
 1623 014c B6FA86F6 		clz	r6, r6
 1624 0150 0A3B     		subs	r3, r3, #10
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 60


 1625 0152 03FB06F6 		mul	r6, r3, r6
 1626 0156 4FF0070E 		mov	lr, #7
 1627 015a 0EFA06F6 		lsl	r6, lr, r6
 1628 015e 25EA0606 		bic	r6, r5, r6
 1629 0162 8D68     		ldr	r5, [r1, #8]
 1630              	.LVL123:
 1631              	.LBB32:
 1632              	.LBB33:
 1633              		.loc 2 531 0
 1634              		.syntax unified
 1635              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 1636 0164 94FAA4F4 		rbit r4, r4
 1637              	@ 0 "" 2
 1638              	.LVL124:
 1639              		.thumb
 1640              		.syntax unified
 1641              	.LBE33:
 1642              	.LBE32:
 1643              		.loc 1 1191 0
 1644 0168 B4FA84F4 		clz	r4, r4
 1645 016c 03FB04F3 		mul	r3, r3, r4
 1646 0170 9D40     		lsls	r5, r5, r3
 1647 0172 3543     		orrs	r5, r5, r6
 1648 0174 FD60     		str	r5, [r7, #12]
 1649 0176 19E0     		b	.L130
 1650              	.L129:
1192:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
1193:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
1194:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1195:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else /* For channels 0 to 9 */
1196:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1197:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 1651              		.loc 1 1197 0
 1652 0178 0768     		ldr	r7, [r0]
 1653 017a 3D69     		ldr	r5, [r7, #16]
 1654              	.LVL125:
 1655              	.LBB34:
 1656              	.LBB35:
 1657              		.loc 2 531 0
 1658 017c 3824     		movs	r4, #56
 1659              		.syntax unified
 1660              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 1661 017e 94FAA4F6 		rbit r6, r4
 1662              	@ 0 "" 2
 1663              	.LVL126:
 1664              		.thumb
 1665              		.syntax unified
 1666              	.LBE35:
 1667              	.LBE34:
 1668              		.loc 1 1197 0
 1669 0182 B6FA86F6 		clz	r6, r6
 1670 0186 03FB06F6 		mul	r6, r3, r6
 1671 018a 4FF0070E 		mov	lr, #7
 1672 018e 0EFA06F6 		lsl	r6, lr, r6
 1673 0192 25EA0606 		bic	r6, r5, r6
 1674 0196 8D68     		ldr	r5, [r1, #8]
 1675              	.LVL127:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 61


 1676              	.LBB36:
 1677              	.LBB37:
 1678              		.loc 2 531 0
 1679              		.syntax unified
 1680              	@ 531 "./Drivers_V1.0.4/CMSIS/Include/cmsis_gcc.h" 1
 1681 0198 94FAA4F4 		rbit r4, r4
 1682              	@ 0 "" 2
 1683              	.LVL128:
 1684              		.thumb
 1685              		.syntax unified
 1686              	.LBE37:
 1687              	.LBE36:
 1688              		.loc 1 1197 0
 1689 019c B4FA84F4 		clz	r4, r4
 1690 01a0 03FB04F3 		mul	r3, r3, r4
 1691 01a4 05FA03F3 		lsl	r3, r5, r3
 1692 01a8 3343     		orrs	r3, r3, r6
 1693 01aa 3B61     		str	r3, [r7, #16]
 1694              	.L130:
1198:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel)                       ,
1199:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
1200:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1201:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1202:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
1203:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
1204:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 1695              		.loc 1 1204 0
 1696 01ac 0B68     		ldr	r3, [r1]
 1697 01ae 103B     		subs	r3, r3, #16
 1698 01b0 012B     		cmp	r3, #1
 1699 01b2 04D8     		bhi	.L131
1205:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
1206:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1207:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 1700              		.loc 1 1207 0
 1701 01b4 0468     		ldr	r4, [r0]
 1702 01b6 A368     		ldr	r3, [r4, #8]
 1703 01b8 43F40003 		orr	r3, r3, #8388608
 1704 01bc A360     		str	r3, [r4, #8]
 1705              	.L131:
1208:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1209:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1210:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1211:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
1212:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   switch(sConfigInjected->InjectedRank)
 1706              		.loc 1 1212 0
 1707 01be 4B68     		ldr	r3, [r1, #4]
 1708 01c0 022B     		cmp	r3, #2
 1709 01c2 0DD0     		beq	.L133
 1710 01c4 032B     		cmp	r3, #3
 1711 01c6 15D0     		beq	.L134
 1712 01c8 012B     		cmp	r3, #1
 1713 01ca 1DD1     		bne	.L142
1213:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1214:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 1:
1215:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 1 offset */
1216:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR1,
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 62


 1714              		.loc 1 1216 0
 1715 01cc 0568     		ldr	r5, [r0]
 1716 01ce 6B69     		ldr	r3, [r5, #20]
 1717 01d0 23F47F63 		bic	r3, r3, #4080
 1718 01d4 23F00F03 		bic	r3, r3, #15
 1719 01d8 CC68     		ldr	r4, [r1, #12]
 1720 01da 2343     		orrs	r3, r3, r4
 1721 01dc 6B61     		str	r3, [r5, #20]
1217:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR1_JOFFSET1,
1218:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1219:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1722              		.loc 1 1219 0
 1723 01de 1CE0     		b	.L136
 1724              	.L133:
1220:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 2:
1221:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 2 offset */
1222:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR2,
 1725              		.loc 1 1222 0
 1726 01e0 0568     		ldr	r5, [r0]
 1727 01e2 AB69     		ldr	r3, [r5, #24]
 1728 01e4 23F47F63 		bic	r3, r3, #4080
 1729 01e8 23F00F03 		bic	r3, r3, #15
 1730 01ec CC68     		ldr	r4, [r1, #12]
 1731 01ee 2343     		orrs	r3, r3, r4
 1732 01f0 AB61     		str	r3, [r5, #24]
1223:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR2_JOFFSET2,
1224:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1225:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1733              		.loc 1 1225 0
 1734 01f2 12E0     		b	.L136
 1735              	.L134:
1226:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 3:
1227:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 3 offset */
1228:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR3,
 1736              		.loc 1 1228 0
 1737 01f4 0568     		ldr	r5, [r0]
 1738 01f6 EB69     		ldr	r3, [r5, #28]
 1739 01f8 23F47F63 		bic	r3, r3, #4080
 1740 01fc 23F00F03 		bic	r3, r3, #15
 1741 0200 CC68     		ldr	r4, [r1, #12]
 1742 0202 2343     		orrs	r3, r3, r4
 1743 0204 EB61     		str	r3, [r5, #28]
1229:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR3_JOFFSET3,
1230:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1231:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1744              		.loc 1 1231 0
 1745 0206 08E0     		b	.L136
 1746              	.L142:
1232:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 4:
1233:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     default:
1234:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR4,
 1747              		.loc 1 1234 0
 1748 0208 0568     		ldr	r5, [r0]
 1749 020a 2B6A     		ldr	r3, [r5, #32]
 1750 020c 23F47F63 		bic	r3, r3, #4080
 1751 0210 23F00F03 		bic	r3, r3, #15
 1752 0214 CC68     		ldr	r4, [r1, #12]
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 63


 1753 0216 2343     		orrs	r3, r3, r4
 1754 0218 2B62     		str	r3, [r5, #32]
 1755              	.L136:
1235:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR4_JOFFSET4,
1236:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1237:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
1238:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1239:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1240:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
1241:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
1242:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 1756              		.loc 1 1242 0
 1757 021a 0B68     		ldr	r3, [r1]
 1758 021c 103B     		subs	r3, r3, #16
 1759 021e 012B     		cmp	r3, #1
 1760 0220 25D8     		bhi	.L137
1243:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
1244:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1245:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
1246:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
1247:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* intended to be set on other ADC instances, an error is reported.       */
1248:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (hadc->Instance == ADC1)
 1761              		.loc 1 1248 0
 1762 0222 0368     		ldr	r3, [r0]
 1763 0224 164C     		ldr	r4, .L144
 1764 0226 A342     		cmp	r3, r4
 1765 0228 1CD1     		bne	.L138
1249:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1250:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 1766              		.loc 1 1250 0
 1767 022a 9C68     		ldr	r4, [r3, #8]
 1768 022c 14F4000F 		tst	r4, #8388608
 1769 0230 1DD1     		bne	.L137
1251:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1252:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 1770              		.loc 1 1252 0
 1771 0232 9C68     		ldr	r4, [r3, #8]
 1772 0234 44F40004 		orr	r4, r4, #8388608
 1773 0238 9C60     		str	r4, [r3, #8]
1253:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
1254:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 1774              		.loc 1 1254 0
 1775 023a 0B68     		ldr	r3, [r1]
 1776 023c 102B     		cmp	r3, #16
 1777 023e 16D1     		bne	.L137
1255:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         {
1256:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Delay for temperature sensor stabilization time */
1257:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Compute number of CPU cycles to wait for */
1258:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 1778              		.loc 1 1258 0
 1779 0240 104B     		ldr	r3, .L144+4
 1780 0242 1B68     		ldr	r3, [r3]
 1781 0244 1049     		ldr	r1, .L144+8
 1782              	.LVL129:
 1783 0246 A1FB0313 		umull	r1, r3, r1, r3
 1784 024a 9B0C     		lsrs	r3, r3, #18
 1785 024c 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 64


 1786 0250 5900     		lsls	r1, r3, #1
 1787 0252 0191     		str	r1, [sp, #4]
1259:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           while(wait_loop_index != 0)
 1788              		.loc 1 1259 0
 1789 0254 02E0     		b	.L139
 1790              	.L140:
1260:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           {
1261:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****             wait_loop_index--;
 1791              		.loc 1 1261 0
 1792 0256 019B     		ldr	r3, [sp, #4]
 1793 0258 013B     		subs	r3, r3, #1
 1794 025a 0193     		str	r3, [sp, #4]
 1795              	.L139:
1259:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           while(wait_loop_index != 0)
 1796              		.loc 1 1259 0
 1797 025c 019B     		ldr	r3, [sp, #4]
 1798 025e 002B     		cmp	r3, #0
 1799 0260 F9D1     		bne	.L140
 1800 0262 04E0     		b	.L137
 1801              	.LVL130:
 1802              	.L138:
1262:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           }
1263:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         }
1264:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1265:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1266:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
1267:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1268:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1269:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1803              		.loc 1 1269 0
 1804 0264 836A     		ldr	r3, [r0, #40]
 1805 0266 43F02003 		orr	r3, r3, #32
 1806 026a 8362     		str	r3, [r0, #40]
 1807              	.LVL131:
1270:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
1271:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 1808              		.loc 1 1271 0
 1809 026c 0122     		movs	r2, #1
 1810              	.LVL132:
 1811              	.L137:
1272:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1273:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1274:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1275:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
1276:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1812              		.loc 1 1276 0
 1813 026e 0023     		movs	r3, #0
 1814 0270 80F82430 		strb	r3, [r0, #36]
1277:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1278:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
1279:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1815              		.loc 1 1279 0
 1816 0274 1046     		mov	r0, r2
 1817              	.LVL133:
 1818 0276 00E0     		b	.L119
 1819              	.LVL134:
 1820              	.L141:
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 65


1059:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 1821              		.loc 1 1059 0
 1822 0278 0220     		movs	r0, #2
 1823              	.LVL135:
 1824              	.L119:
1280:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1825              		.loc 1 1280 0
 1826 027a 03B0     		add	sp, sp, #12
 1827              	.LCFI26:
 1828              		.cfi_def_cfa_offset 20
 1829              		@ sp needed
 1830 027c F0BD     		pop	{r4, r5, r6, r7, pc}
 1831              	.L145:
 1832 027e 00BF     		.align	2
 1833              	.L144:
 1834 0280 00240140 		.word	1073816576
 1835 0284 00000000 		.word	SystemCoreClock
 1836 0288 83DE1B43 		.word	1125899907
 1837              		.cfi_endproc
 1838              	.LFE75:
 1840              		.section	.text.HAL_ADCEx_MultiModeConfigChannel,"ax",%progbits
 1841              		.align	2
 1842              		.global	HAL_ADCEx_MultiModeConfigChannel
 1843              		.thumb
 1844              		.thumb_func
 1846              	HAL_ADCEx_MultiModeConfigChannel:
 1847              	.LFB76:
1281:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1282:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F101xG) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC
1283:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
1284:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enable ADC multimode and configure multimode parameters
1285:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
1286:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         This function initializes multimode parameters, following  
1287:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         calls to this function can be used to reconfigure some parameters 
1288:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         of structure "ADC_MultiModeTypeDef" on the fly, without reseting 
1289:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         the ADCs (both ADCs of the common group).
1290:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
1291:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure 
1292:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         "ADC_MultiModeTypeDef".
1293:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   To change back configuration from multimode to single mode, ADC must
1294:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         be reset (using function HAL_ADC_Init() ).
1295:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1296:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  multimode: Structure of ADC multimode configuration
1297:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
1298:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1299:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* m
1300:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1848              		.loc 1 1300 0
 1849              		.cfi_startproc
 1850              		@ args = 0, pretend = 0, frame = 0
 1851              		@ frame_needed = 0, uses_anonymous_args = 0
 1852              		@ link register save eliminated.
 1853              	.LVL136:
1301:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1302:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
1303:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1304:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 66


1305:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1306:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MODE(multimode->Mode));
1307:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1308:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
1309:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1854              		.loc 1 1309 0
 1855 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1856 0004 012B     		cmp	r3, #1
 1857 0006 27D0     		beq	.L150
 1858              		.loc 1 1309 0 is_stmt 0 discriminator 2
 1859 0008 0123     		movs	r3, #1
 1860 000a 80F82430 		strb	r3, [r0, #36]
1310:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1311:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Set a temporary handle of the ADC slave associated to the ADC master     */
1312:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
1313:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1314:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1315:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1316:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion on going on regular group:                                    */
1317:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - ADC master and ADC slave DMA configuration                            */
1318:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
1319:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Multimode mode selection                                              */
1320:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* To optimize code, all multimode settings can be set when both ADCs of    */
1321:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* the common group are in state: disabled.                                 */
1322:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 1861              		.loc 1 1322 0 is_stmt 1 discriminator 2
 1862 000e 0368     		ldr	r3, [r0]
 1863 0010 9A68     		ldr	r2, [r3, #8]
 1864 0012 12F0010F 		tst	r2, #1
 1865 0016 10D1     		bne	.L148
1323:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 1866              		.loc 1 1323 0 discriminator 1
 1867 0018 114A     		ldr	r2, .L154
 1868 001a 9268     		ldr	r2, [r2, #8]
1322:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 1869              		.loc 1 1322 0 discriminator 1
 1870 001c 12F0010F 		tst	r2, #1
 1871 0020 0BD1     		bne	.L148
 1872              		.loc 1 1323 0
 1873 0022 104A     		ldr	r2, .L154+4
 1874 0024 9342     		cmp	r3, r2
 1875 0026 08D1     		bne	.L148
1300:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1876              		.loc 1 1300 0
 1877 0028 10B4     		push	{r4}
 1878              	.LCFI27:
 1879              		.cfi_def_cfa_offset 4
 1880              		.cfi_offset 4, -4
1324:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
1325:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1326:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR1,
 1881              		.loc 1 1326 0
 1882 002a 5A68     		ldr	r2, [r3, #4]
 1883 002c 22F47024 		bic	r4, r2, #983040
 1884 0030 0A68     		ldr	r2, [r1]
 1885 0032 2243     		orrs	r2, r2, r4
 1886 0034 5A60     		str	r2, [r3, #4]
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 67


1301:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 1887              		.loc 1 1301 0
 1888 0036 0023     		movs	r3, #0
 1889              		.loc 1 1326 0
 1890 0038 09E0     		b	.L149
 1891              	.L148:
 1892              	.LCFI28:
 1893              		.cfi_def_cfa_offset 0
 1894              		.cfi_restore 4
1327:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CR1_DUALMOD    ,
1328:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                multimode->Mode     );
1329:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1330:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* If one of the ADC sharing the same common group is enabled, no update    */
1331:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* could be done on neither of the multimode structure parameters.          */
1332:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
1333:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1334:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
1335:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1895              		.loc 1 1335 0
 1896 003a 836A     		ldr	r3, [r0, #40]
 1897 003c 43F02003 		orr	r3, r3, #32
 1898 0040 8362     		str	r3, [r0, #40]
 1899              	.LVL137:
1336:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1337:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 1900              		.loc 1 1337 0
 1901 0042 0123     		movs	r3, #1
 1902              	.LVL138:
1338:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1339:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1340:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1341:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
1342:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1903              		.loc 1 1342 0
 1904 0044 0022     		movs	r2, #0
 1905 0046 80F82420 		strb	r2, [r0, #36]
1343:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1344:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
1345:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1906              		.loc 1 1345 0
 1907 004a 1846     		mov	r0, r3
 1908              	.LVL139:
1346:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** } 
 1909              		.loc 1 1346 0
 1910 004c 7047     		bx	lr
 1911              	.LVL140:
 1912              	.L149:
 1913              	.LCFI29:
 1914              		.cfi_def_cfa_offset 4
 1915              		.cfi_offset 4, -4
1342:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 1916              		.loc 1 1342 0
 1917 004e 0022     		movs	r2, #0
 1918 0050 80F82420 		strb	r2, [r0, #36]
1345:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** } 
 1919              		.loc 1 1345 0
 1920 0054 1846     		mov	r0, r3
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 68


 1921              	.LVL141:
 1922 0056 01E0     		b	.L147
 1923              	.LVL142:
 1924              	.L150:
 1925              	.LCFI30:
 1926              		.cfi_def_cfa_offset 0
 1927              		.cfi_restore 4
1309:./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 1928              		.loc 1 1309 0
 1929 0058 0220     		movs	r0, #2
 1930              	.LVL143:
 1931 005a 7047     		bx	lr
 1932              	.LVL144:
 1933              	.L147:
 1934              	.LCFI31:
 1935              		.cfi_def_cfa_offset 4
 1936              		.cfi_offset 4, -4
 1937              		.loc 1 1346 0
 1938 005c 10BC     		pop	{r4}
 1939              	.LCFI32:
 1940              		.cfi_restore 4
 1941              		.cfi_def_cfa_offset 0
 1942 005e 7047     		bx	lr
 1943              	.L155:
 1944              		.align	2
 1945              	.L154:
 1946 0060 00280140 		.word	1073817600
 1947 0064 00240140 		.word	1073816576
 1948              		.cfi_endproc
 1949              	.LFE76:
 1951              		.text
 1952              	.Letext0:
 1953              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160928/arm-none-eabi/include/machine/_default_types
 1954              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20160928/arm-none-eabi/include/sys/_stdint.h"
 1955              		.file 5 "./Drivers_V1.0.4/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1956              		.file 6 "./Drivers_V1.0.4/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1957              		.file 7 "./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1958              		.file 8 "./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1959              		.file 9 "./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1960              		.file 10 "./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc_ex.h"
 1961              		.file 11 "./Drivers_V1.0.4/CMSIS/Include/core_cm3.h"
 1962              		.file 12 "./Drivers_V1.0.4/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1963              		.file 13 "./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1964              		.file 14 "./Drivers_V1.0.4/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s 			page 69


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_adc_ex.c
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:20     .text.HAL_ADCEx_Calibration_Start:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:25     .text.HAL_ADCEx_Calibration_Start:0000000000000000 HAL_ADCEx_Calibration_Start
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:197    .text.HAL_ADCEx_Calibration_Start:00000000000000ec $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:202    .text.HAL_ADCEx_InjectedStart:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:207    .text.HAL_ADCEx_InjectedStart:0000000000000000 HAL_ADCEx_InjectedStart
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:349    .text.HAL_ADCEx_InjectedStart:00000000000000bc $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:354    .text.HAL_ADCEx_InjectedStop:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:359    .text.HAL_ADCEx_InjectedStop:0000000000000000 HAL_ADCEx_InjectedStop
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:434    .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:439    .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 HAL_ADCEx_InjectedPollForConversion
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:686    .text.HAL_ADCEx_InjectedPollForConversion:0000000000000158 $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:695    .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:700    .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 HAL_ADCEx_InjectedStart_IT
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:847    .text.HAL_ADCEx_InjectedStart_IT:00000000000000c4 $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:852    .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:857    .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 HAL_ADCEx_InjectedStop_IT
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:937    .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:942    .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000000 HAL_ADCEx_MultiModeStart_DMA
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1104   .text.HAL_ADCEx_MultiModeStart_DMA:00000000000000e0 $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1113   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1118   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000000 HAL_ADCEx_MultiModeStop_DMA
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1235   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000088 $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1240   .text.HAL_ADCEx_InjectedGetValue:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1245   .text.HAL_ADCEx_InjectedGetValue:0000000000000000 HAL_ADCEx_InjectedGetValue
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1296   .text.HAL_ADCEx_MultiModeGetValue:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1301   .text.HAL_ADCEx_MultiModeGetValue:0000000000000000 HAL_ADCEx_MultiModeGetValue
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1329   .text.HAL_ADCEx_MultiModeGetValue:0000000000000018 $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1335   .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1340   .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 HAL_ADCEx_InjectedConvCpltCallback
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1353   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1358   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 HAL_ADCEx_InjectedConfigChannel
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1834   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000280 $d
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1841   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000000 $t
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1846   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000000 HAL_ADCEx_MultiModeConfigChannel
/var/folders/jn/652hmfdj2m99syhs9p34dk640000gq/T//ccvbf9s8.s:1946   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000060 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ADC_ConversionStop_Disable
HAL_RCCEx_GetPeriphCLKFreq
ADC_Enable
HAL_GetTick
SystemCoreClock
HAL_DMA_Start_IT
ADC_DMAConvCplt
ADC_DMAHalfConvCplt
ADC_DMAError
HAL_DMA_Abort
